// AUTO-generated code. See jslibs/qa.js
	
		LoadModule("jsstd");
		LoadModule("jsdebug");
		var prev_stdout = _host.stdout;
		var prev_stderr = _host.stderr;
		delete _host.stdout;
		delete _host.stderr;

		((function anonymous(QA) {LoadModule("jsstd");LoadModule("jsio");}))(qaapi);((function anonymous(QA) {LoadModule("jscrypt");}))(qaapi);((function anonymous(QA) {LoadModule("jsdebug");}))(qaapi);((function anonymous(QA) {}))(qaapi);((function anonymous(QA) {LoadModule("jsiconv");}))(qaapi);((function anonymous(QA) {LoadModule("jsimage");}))(qaapi);((function anonymous(QA) {LoadModule("jsio");LoadModule("jsdebug");}))(qaapi);((function anonymous(QA) {}))(qaapi);((function anonymous(QA) {LoadModule("jsstd");}))(qaapi);((function anonymous(QA) {LoadModule("jsode");}))(qaapi);((function anonymous(QA) {LoadModule("jsprotex");}))(qaapi);((function anonymous(QA) {LoadModule("jssqlite");}))(qaapi);((function anonymous(QA) {LoadModule("jsstd");}))(qaapi);((function anonymous(QA) {LoadModule("jstask");LoadModule("jsio");}))(qaapi);((function anonymous(QA) {LoadModule("jsstd");LoadModule("jstrimesh");}))(qaapi);((function anonymous(QA) {LoadModule("jsz");}))(qaapi);
		function Tests() {((function anonymous(QA) {var source = QA.RandomString(10000);var deflate1 = new Z(Z.DEFLATE);deflate1(source, true);var deflate2 = new Z(Z.DEFLATE);deflate2(source);deflate2();QA.ASSERT(deflate1.lengthOut <= deflate2.lengthOut, true, "lengthOut");QA.ASSERT(deflate1.adler32, deflate2.adler32, "adler32");}))(qaapi);
((function anonymous(QA) {var deflate = new Z(Z.DEFLATE);var inflate = new Z(Z.INFLATE);for (var i = 0; i < 200; i++) {inflate(deflate(QA.RandomString(10000)));}inflate(deflate());QA.ASSERT(deflate.lengthIn, 2000000, "input length");QA.ASSERT(deflate.lengthIn, inflate.lengthOut, "in and out length");QA.ASSERT(deflate.adler32, inflate.adler32, "adler32 match");}))(qaapi);
((function anonymous(QA) {var deflate = new Z(Z.DEFLATE);var inflate = new Z(Z.INFLATE);var source = "x";var str = deflate(source, true);QA.ASSERT_STR(str, "x\x9C\xAB\0\0\0y\0y", "deflate result");var result = inflate(str, true);QA.ASSERT_STR(result, source, "inflate result");}))(qaapi);
((function anonymous(QA) {var data = "clear data";var deflatedData = (new Z(Z.DEFLATE))(data, true);var deflater = new Z(Z.DEFLATE);QA.ASSERT_STR(deflater(data, true), deflatedData, "1st complete deflate");QA.ASSERT_STR(deflater(data, true), deflatedData, "2nd complete deflate");QA.ASSERT_STR(deflater(data, true), deflatedData, "3rd complete deflate");QA.ASSERT(deflater(data, true).length, deflatedData.length, "4rd complete deflate length");}))(qaapi);
((function anonymous(QA) {var data = "clear data";var deflatedData = (new Z(Z.DEFLATE))(data, true);var inflater = new Z(Z.INFLATE);QA.ASSERT_STR(inflater(deflatedData, true), data, "1st complete inflate");QA.ASSERT_STR(inflater(deflatedData, true), data, "2nd complete inflate");QA.ASSERT_STR(inflater(deflatedData, true), data, "3rd complete inflate");}))(qaapi);
((function anonymous(QA) {var uncompressezText = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz";var deflater = new Z(Z.DEFLATE, 9);QA.ASSERT(deflater.idle, true, "idle");var compressedText = deflater(uncompressezText);QA.ASSERT(deflater.idle, false, "idle");compressedText += deflater(uncompressezText);QA.ASSERT(deflater.idle, false, "idle");compressedText += deflater(uncompressezText, true);QA.ASSERT(deflater.idle, true, "idle");QA.ASSERT(compressedText.length, deflater.lengthOut, "compressed text length");QA.ASSERT(deflater.adler32, 2686765097, "adler32");QA.ASSERT(deflater.lengthIn, 3 * uncompressezText.length, "lengthIn property");}))(qaapi);
((function anonymous(QA) {var uncompressezText = "jjjjjjjjjjjssssssssssssssssssslllllliiiiiiiibbsssssssssssssss";var level = 9;var compressedText = (new Z(Z.DEFLATE, level))(uncompressezText, true);var ratio = (100 * compressedText.length / uncompressezText.length).toFixed(2) + "%";QA.ASSERT(ratio, "37.70%", "Bad compression ratio");}))(qaapi);
((function anonymous(QA) {var deflate = new Z(Z.DEFLATE);var inflate = new Z(Z.INFLATE);inflate(deflate());}))(qaapi);
((function anonymous(QA) {var s = SandboxEval("var a = Math.abs(-123); a");QA.ASSERT(s, 123, "abs");}))(qaapi);
((function anonymous(QA) {var prev = disableGarbageCollection;disableGarbageCollection = true;QA.ASSERT(disableGarbageCollection, true, "GC is disabled");QA.GC();var mem0 = privateMemoryUsage;var str = StringRepeat("x", 1000000);str = undefined;QA.GC();var mem1 = privateMemoryUsage;QA.ASSERT(mem1 >= mem0 + 1000000, true, "without GC");disableGarbageCollection = prev;}))(qaapi);
((function anonymous(QA) {LoadModule("jsio");var res = SandboxEval("typeof File");QA.ASSERT(res == typeof File, false, "forbidden File class access");var res = SandboxEval("typeof LoadModule");QA.ASSERT(res == typeof LoadModule, false, "forbidden LoadModule function access");}))(qaapi);
((function anonymous(QA) {var res = SandboxEval("Math");QA.ASSERT(res.toString(), Math.toString(), "Math object");QA.ASSERT(res == Math, false, "Global objects");}))(qaapi);
((function anonymous(QA) {var str1 = StringRepeat("y", 100);QA.ASSERT([c for each (c in str1) if (c == "y")].length, 100, "all chars are good");var str = StringRepeat("x", 10000);QA.ASSERT(str.length, 10000, "string length");QA.ASSERT(str[0], "x", "first char");QA.ASSERT(str[9999], "x", "last char");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(IsStatementValid("for ( var i; i<10; i++ )"), false, "invalid statement");QA.ASSERT(IsStatementValid("for ( var i; i<10; i++ );"), true, "valid statement");QA.ASSERT(IsStatementValid("{a,b,c} = { a:1, b:2, c:3 }"), true, "valid statement");}))(qaapi);
((function anonymous(QA) {var o = {a: 1, b: {c: 2}};DeepFreezeObject(o);o.a = 5;QA.ASSERT(o.a, 1, "freezed object");o.b.c = 6;QA.ASSERT(o.b.c, 2, "deep freezed object");}))(qaapi);
((function anonymous(QA) {var o = {x: 5, y: 6, z: 7};QA.ASSERT("z" in o, true, "has z property");ClearObject(o);QA.ASSERT("z" in o, false, "property z is cleared");}))(qaapi);
((function anonymous(QA) {var o = {x: 5, y: 6, z: 7};QA.ASSERT("z" in o, true, "has z property");ClearObject(o);QA.ASSERT("z" in o, false, "property z is cleared");}))(qaapi);
((function anonymous(QA) {LoadModule("jsio");var f = new File("qa_exec_test.js");f.content = "(1234)";var res = Exec(f.name, true);QA.ASSERT(res, 1234, "Exec return value");var fxdr = new File("qa_exec_test.jsxdr");QA.ASSERT(fxdr.exist, true, "XDR file exist");f.Delete();QA.ASSERT(f.exist, false, "do not have source file");var res = Exec(f.name, true);QA.ASSERT(res, 1234, "Exec using XDR file");fxdr.Delete();QA.ASSERT(fxdr.exist, false, "XDR file is deleted");try {var res = Exec(f.name, false);QA.FAILED("Exec do not detect missing file");} catch (ex) {QA.ASSERT(ex.constructor, Error, "Exec exception");QA.ASSERT(ex.message.substr(0, 21), "Unable to load Script", "error message");}}))(qaapi);
((function anonymous(QA) {LoadModule("jsio");var f = new File("qa_exec_test.js");f.content = "((1234))";var res = Exec("qa_exec_test.js", false);QA.ASSERT_STR(res, eval(f.content.toString()), "content validity");var res = Exec.call(this, "qa_exec_test.js", false);QA.ASSERT_STR(res, eval(f.content.toString()), "content validity");f.content = undefined;}))(qaapi);
((function anonymous(QA) {var ids = "";var i = 0;var res = Expand("ab$(c)$(d)e$(f)g$(h)ij", function (id) {ids += id;return i++;});QA.ASSERT_STR(res + "-" + ids, "ab01e2g3ij-cdfh", "Expand result is correct");}))(qaapi);
((function anonymous(QA) {var exp = StringRepeat("$(X)", 1000);for (var i = 0; i < 10; ++i) {Expand(exp, {X: "123"});}}))(qaapi);
((function anonymous(QA) {QA.ASSERT(Expand("\u1234", {}), "\u1234", "unicode");QA.ASSERT(Expand("$(\u1234)", {'\u1234': "ok"}), "ok", "unicode key");QA.ASSERT(Expand("$(foo)", {foo: "\u1234"}), "\u1234", "unicode value");QA.ASSERT(Expand("abcde", {}), "abcde", "no expand");QA.ASSERT(Expand("ab$()cde", {}), "abcde", "empty expand");QA.ASSERT(Expand("ab$(xx)cde", {}), "abcde", "unknown expand");QA.ASSERT(Expand("$(foo)", {foo: "$(foo)"}), "$(foo)", "kind of escape for $()");QA.ASSERT(Expand("", {h: "Hello", w: "World"}), "", "expanding an empty string");QA.ASSERT(Expand("Hello World"), "Hello World", "expanding a simple string");QA.ASSERT(Expand(" $(h) $(w)", {h: "Hello", w: "World"}), " Hello World", "expanding a string");QA.ASSERT(Expand(" $(h) $(w", {h: "Hello", w: "World"}), " Hello ", "expanding a bugous string");QA.ASSERT(Expand(" $(h) $(", {h: "Hello", w: "World"}), " Hello ", "expanding a bugous string");QA.ASSERT(Expand(" $(h) $", {h: "Hello", w: "World"}), " Hello $", "expanding a string");QA.ASSERT(Expand(" $(h)", {h: "Hello", w: "World"}), " Hello", "expanding a string");QA.ASSERT(Expand("$(c)"), "", "expanding a string");QA.ASSERT(Expand("$(c)a"), "a", "expanding a string");QA.ASSERT(Expand("a$(c"), "a", "expanding a string");QA.ASSERT(Expand("a$()c"), "ac", "expanding a string");QA.ASSERT(Expand("a$(b)c"), "ac", "expanding a string");QA.ASSERT(Expand("a$(b)c", {}), "ac", "expanding a string");QA.ASSERT(Expand("a$(b)c", {b: ""}), "ac", "expanding a string");QA.ASSERT(Expand("$(b)c", {b: ""}), "c", "expanding a string");QA.ASSERT(Expand("a$(b)", {b: ""}), "a", "expanding a string");QA.ASSERT(Expand("a$()", {b: ""}), "a", "expanding a string");QA.ASSERT(Expand("$()a", {b: ""}), "a", "expanding a string");QA.ASSERT(Expand("$(b)$(b)$(b)", {b: ""}), "", "expanding a string");QA.ASSERT(Expand("$(b)$(b)$(b)", {b: "x"}), "xxx", "expanding a string");QA.ASSERT(Expand("$(b)$(b$(b)", {b: "x"}), "x", "expanding a string");QA.ASSERT(Expand("$(b)$(b$(b)"), "", "expanding a string");QA.ASSERT(Expand("a$(b()c)d", (function (key) key)), "ab(c)d", "expanding a string");QA.ASSERT(Expand("$(b)$(b$(b)", (function (key) key)), "bb$(b", "expanding a string");QA.ASSERT(Expand("$(b)$(b$(b", (function (key) key)), "b", "expanding a string");QA.ASSERT(Expand("$()", (function (key) key)), "", "expanding a string");QA.ASSERT(Expand("a$(b)c$(d)e", (function (key) key)), "abcde", "expanding a string");QA.ASSERT(Expand("$(b)c$(d)", (function (key) key)), "bcd", "expanding a string");QA.ASSERT(Expand("$(a)", (function (key) undefined)), "", "expanding a string");QA.ASSERT(Expand("$(a)", (function (key) null)), "", "expanding a string");QA.ASSERT(Expand("", (function (key) key)), "", "expanding a string");QA.ASSERT(Expand("", (function (key) key)), "", "expanding a string");QA.ASSERT_EXCEPTION((function () Expand("$()", function (key) {throw 123;})), 123, "Expand function throw exception");var obj = {toString: function () {return "Hello";}};QA.ASSERT(Expand("$(h)", {h: obj}), "Hello", "expanding a string");var obj1 = {Expand: Expand, x: 123, y: "456"};QA.ASSERT(obj1.Expand("$(x)$(y)", obj1), "123456", "expanding a string using this as map");var o = {title: "My HTML Page", titi: 1234, toString: function () {return Expand(this.text, this);}};o.text = "<html><title>$(title)</title>\n";QA.ASSERT_STR(o, "<html><title>My HTML Page</title>\n", "expand string using this object");}))(qaapi);
((function anonymous(QA) {var buf = new Buffer;var pack = new Pack(buf);var v = 12345678;pack.WriteInt(v, 4, true);QA.ASSERT(pack.buffer.length, 4, "buffer length");QA.ASSERT(v, pack.ReadInt(4, true), "data validity");pack.WriteInt(v, 4);QA.ASSERT(v, pack.ReadInt(4, false), "data validity");pack.WriteInt(v, 4, false);QA.ASSERT(v, pack.ReadInt(4), "data validity");v = 65432;pack.WriteInt(v, 2);QA.ASSERT(v, pack.ReadInt(2), "data validity");}))(qaapi);
((function anonymous(QA) {var buf = new Buffer;buf.Write("\xAA\xBB\xCC\xDD");var pack = new Pack(buf);QA.ASSERT_STR(pack.ReadString(4), "\xAA\xBB\xCC\xDD", "ReadString");}))(qaapi);
((function anonymous(QA) {var buf = new Buffer;buf.Write("\xAA\xBB\xCC\xDD");var pack = new Pack(buf);QA.ASSERT(pack.ReadInt(4, false, true).toString(16), "aabbccdd", "ReadInt");}))(qaapi);
((function anonymous(QA) {if (!Pack.systemIsBigEndian) {var buf = new Buffer;var pack = new Pack(buf);var v = 1903326068;pack.WriteInt(v, 4, false);QA.ASSERT_STR(buf.Read(), "tsrq", "check stored data");} else {QA.FAILED("this test is missing");}}))(qaapi);
((function anonymous(QA) {var buf = new Buffer;var pack = new Pack(buf);pack.WriteInt(-9007199254740991, 8, true);var v = pack.ReadInt(8, true);QA.ASSERT(v, -9007199254740991, "min value");pack.WriteInt(9007199254740991, 8);var v = pack.ReadInt(8);QA.ASSERT(v, 9007199254740991, "max value");QA.ASSERT_EXCEPTION(function () {pack.WriteInt(9007199254740992, 8, true);}, RangeError, "value overflow");}))(qaapi);
((function anonymous(QA) {var buf = new Buffer(Stream("456"));buf.Write("123");QA.ASSERT(buf.length, 3, "length");QA.ASSERT_STR(buf.Read(6), "123456", "read");var buf1 = new Buffer(Stream("456"));buf1.Write("123");QA.ASSERT(buf1.length, 3, "length");QA.ASSERT_STR(buf1.Read(6), "123456", "read");var buf2 = new Buffer({Read: function (count) {return StringRepeat("x", count);}});buf2.Write("123");QA.ASSERT(buf2.length, 3, "length");QA.ASSERT_STR(buf2.Read(6), "123xxx", "read");var buf3 = new Buffer({Read: function (count) {buf3.Write(StringRepeat("x", count));}});buf3.Write("123");QA.ASSERT(buf3.length, 3, "length");QA.ASSERT_STR(buf3.Read(6), "123xxx", "read");}))(qaapi);
((function anonymous(QA) {var buf = new Buffer;buf.Write("12345");buf.Write("6");buf.Write("");buf.Write("789");QA.ASSERT_STR(buf.Read(2), "12", "Read(int)");buf.Clear();QA.ASSERT(buf.length, 0, "empty length");QA.ASSERT(buf.Read(), "", "empty content");buf.Write("4");buf.Write("45");QA.ASSERT(buf.length, 3, "content length");}))(qaapi);
((function anonymous(QA) {var buf = new Buffer;buf.Write("xxx");buf.Write("aaa");buf.Write("bb1");buf.Write("14ccc");buf.Write("buffer2");QA.ASSERT_STR(buf.ReadUntil("114"), "xxxaaabb", "ReadUntil");QA.ASSERT(typeof buf, "object", "buffer type");QA.ASSERT_STR(buf, "cccbuffer2", "remaining");}))(qaapi);
((function anonymous(QA) {var b = new Buffer;b.Write("abcd");b.Write("e");b.Write("");b.Write("");b.Write("fghij");QA.ASSERT(b.IndexOf("def"), 3, "buffer read");}))(qaapi);
((function anonymous(QA) {var str = new Blob("123");var b = new Buffer;b.Write(str);str.concat("456");b.Write("7");QA.ASSERT_STR(b.Read(), "1237", "buffer containing a Blob");}))(qaapi);
((function anonymous(QA) {var b = new Buffer;b.Write({toString: function () {return "01";}});b.Write([2, 3]);b.Write(4567);b.Write(8.9);QA.ASSERT_STR(b.Read(3), "012", "buffer read stored values");QA.ASSERT_STR(b.Read(3), ",34", "buffer read stored values");QA.ASSERT_STR(b.Read(2), "56", "buffer read stored values");QA.ASSERT_STR(b.Read(3), "78.", "buffer read stored values");QA.ASSERT_STR(b.Read(1), "9", "buffer read stored values");}))(qaapi);
((function anonymous(QA) {var b = new Buffer;b.Write({toString: function () {return "01";}});b.Write([2, 3]);b.Write(4567);b.Write(8.9);QA.ASSERT_STR(b.Read(), "012,345678.9", "buffer read stored values");}))(qaapi);
((function anonymous(QA) {var b = new Buffer;b.Write("12345");b.Write("678");b.Write("9");b.Write("");QA.ASSERT_STR(b.valueOf(), "123456789", "buffer valueOf");}))(qaapi);
((function anonymous(QA) {var b = new Buffer;b.Write("123");var str1 = b.toString();var str2 = b.toString();QA.ASSERT(str2.length, str1.length, "toString Buffer consumption");QA.ASSERT(str1, "123", "first toString result");QA.ASSERT(str2, "123", "second toString result");}))(qaapi);
((function anonymous(QA) {var b = new Buffer;b.Write("12345");b.Write("678");b.Write("9");b.Write("");QA.ASSERT_STR(b, "123456789", "buffer toString");}))(qaapi);
((function anonymous(QA) {var b = new Buffer;b.Write("123");QA.ASSERT_STR(b.Read(1), "1", "buffer read");}))(qaapi);
((function anonymous(QA) {var b1 = new Buffer;b1.Write("1");b1.Write("");b1.Write("1");b1.Write("1");QA.ASSERT(b1.length, 3, "source buffer length");var b2 = new Buffer;b2.Write("aaa");b2.Write(b1);QA.ASSERT(b1.length, 3, "source buffer length");b2.Write("bbb");b2.Write(b1);QA.ASSERT(b1.length, 3, "source buffer length");QA.ASSERT_STR(b2.toString(), "aaa111bbb111", "buffer content");QA.ASSERT_STR(b1.toString(), "111", "source buffer content");}))(qaapi);
((function anonymous(QA) {var b = new Buffer;b.Write("abcdefghi");b.Read(2);b.Read(2);b.Read(2);b.Read(2);QA.ASSERT_STR(b.Read(2), "i", "buffer match");}))(qaapi);
((function anonymous(QA) {var b = new Buffer;b.Read(0);b.Write("aaa");b.Write("");b.Write("bbXb");b.Write("");b.Write("ccc");b.Read(2);b.ReadUntil("X");b.Skip(2);b.Match("cc");b.Unread("ddd");b.Match("ddd");b.Match("ZZZ");b.ReadUntil("ZZZ");b.Read(1000);b.Write("eeee");b.Write("ffff");b.Write("gggg");b.Read(0);var t = b.Read();QA.ASSERT_STR(t, "eeeeffffgggg", "buffer match");}))(qaapi);
((function anonymous(QA) {var b = new Buffer;b.Write("");b.Write("123");b.Write("");b.Write("456");b.Write("");b.Write("789");b.Write("");var res = b[-1] + b[0] + b[1] + b[2] + b[3] + b[4] + b[5] + b[6] + b[7] + b[8] + b[9] + b[10];QA.ASSERT(res.length, 9, "resulting length");QA.ASSERT(res, "123456789", "resulting string");QA.ASSERT(b.toString(), res, "resulting string");}))(qaapi);
((function anonymous(QA) {var errBuffer = new Buffer;QA.GC();for (var i = 0; i < 3; i++) {errBuffer.Write(StringRepeat("z", 1000000));QA.GC();}var res = errBuffer.toString().indexOf("zzz");QA.GC();QA.ASSERT(res, 0, "buffer test");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(StringRepeat("123", 1048576).length, 3145728, "3MB");}))(qaapi);
((function anonymous(QA) {var m = Map();QA.ASSERT("__proto__" in m, false, "has no __proto__");QA.ASSERT("toString" in m, false, "has no toString");QA.ASSERT("toSource" in m, false, "has no toSource");m.__proto__ = "AAA", m.toString = "CCC";m.toSource = "DDD";QA.ASSERT(m.__proto__, "AAA", " __proto__ custom fvalue");QA.ASSERT(m.toString, "CCC", "toString custom fvalue");QA.ASSERT(m.toSource, "DDD", "toSource custom fvalue");delete m.__proto__;delete m.toString;delete m.toSource;QA.ASSERT("__proto__" in m, false, "has no __proto__");QA.ASSERT("toString" in m, false, "has no toString");QA.ASSERT("toSource" in m, false, "has no toSource");m.__proto__ = {a: 1};QA.ASSERT(m.a, undefined, "no __proto__ behavior");}))(qaapi);
((function anonymous(QA) {var m = new Map;QA.ASSERT("__proto__" in m, false, "has no __proto__");QA.ASSERT("toString" in m, false, "has no toString");QA.ASSERT("toSource" in m, false, "has no toSource");m.__proto__ = "AAA", m.toString = "CCC";m.toSource = "DDD";QA.ASSERT(m.__proto__, "AAA", " __proto__ custom fvalue");QA.ASSERT(m.toString, "CCC", "toString custom fvalue");QA.ASSERT(m.toSource, "DDD", "toSource custom fvalue");delete m.__proto__;delete m.toString;delete m.toSource;QA.ASSERT("__proto__" in m, false, "has no __proto__");QA.ASSERT("toString" in m, false, "has no toString");QA.ASSERT("toSource" in m, false, "has no toSource");m.__proto__ = {a: 1};QA.ASSERT(m.a, undefined, "no __proto__ behavior");}))(qaapi);
((function anonymous(QA) {var ids = function () {var arr = [];for (var i = 0; i < 256; i++) {var obj = {xxx: i};var id = ObjectToId(obj);QA.ASSERT(IdToObject(id), obj, "obj->id->obj");arr.push(id);}return arr;}();var count = 0;for each (id in ids) {QA.ASSERT_TYPE(id, "number", "id type is good");QA.ASSERT(id >= 1, true, "id is valid");count += IdToObject(id) == undefined ? 0 : 1;}QA.ASSERT(count, ids.length, "IdToObject validity before GC (may fail if gcZeal > 0)");QA.GC();var count = 0;for each (id in ids) {QA.ASSERT_TYPE(id, "number", "id type is good");QA.ASSERT(id >= 1, true, "id is valid");count += IdToObject(id) == undefined ? 0 : 1;}QA.ASSERT(count < ids.length, true, "IdToObject after GC (may fail if CG is desactivated)");for (var i = 0; i < 500; i++) {ObjectToId({});}QA.GC();for (var i = 0; i < 1000; i++) {ObjectToId({});}}))(qaapi);
((function anonymous(QA) {
function MyException() {}


function SetOnceObject() new ObjEx(undefined, undefined, undefined, (function (name, value) this[name] ? function () {throw new MyException;}() : value));

var o = SetOnceObject();o.abc = 123;QA.ASSERT_EXCEPTION(function () {o.abc = 456;}, MyException, "using setter");}))(qaapi);
((function anonymous(QA) {var aux = {};var addCallbackCalls = 0;var setCallbackCalls = 0;
function addCallback(propertyName, propertyValue, auxObject, callbackIndex) {addCallbackCalls++;QA.ASSERT(propertyName, "foo", "added key name");QA.ASSERT(propertyValue, 123, "added value");QA.ASSERT(auxObject, aux, "aux object");}


function setCallback(propertyName, propertyValue, auxObject, callbackIndex) {setCallbackCalls++;if (setCallbackCalls == 1) {QA.ASSERT(propertyName, "foo", "set key name");QA.ASSERT(propertyValue, undefined, "set value");} else {QA.ASSERT(propertyName, "foo", "set key name");QA.ASSERT(propertyValue, 456, "set value");}QA.ASSERT(auxObject, aux, "aux object");}

var obj = new ObjEx(addCallback, undefined, undefined, setCallback, aux);QA.ASSERT(ObjEx.Aux(obj), aux, "aux object");obj.foo = 123;obj.foo = 456;QA.ASSERT(addCallbackCalls, 1, "addCallback calls count");QA.ASSERT(setCallbackCalls, 2, "setCallback calls count");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(IsNumber(123), true, "number value");QA.ASSERT(IsNumber(true), false, "not a number value");QA.ASSERT(IsNumber(new Boolean(123)), false, "number object");QA.ASSERT(IsNumber(new Number(123)), true, "not a number object");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(IsBoolean(false), true, "boolean value");QA.ASSERT(IsBoolean(0), false, "not a boolean value");QA.ASSERT(IsBoolean(new Number(123)), false, "not a boolean object");QA.ASSERT(IsBoolean(new Boolean(123)), true, "boolean object");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(SwitchCase(1, [1, "1"], ["num", "str"]), "num", "SwitchCase type");QA.ASSERT(SwitchCase("1", [1, "1"], ["num", "str"]), "str", "SwitchCase type");QA.ASSERT(SwitchCase(2, [1, "1"], ["num", "str"]), undefined, "SwitchCase not found");QA.ASSERT(SwitchCase(2, [1, "1"], ["num", "str"], "def"), "def", "SwitchCase default value");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(CountProperties({}), 0, "test with 0 properties");QA.ASSERT(CountProperties({a: 1}), 1, "test with 1 properties");QA.ASSERT(CountProperties({a: 1, b: 2}), 2, "test with 2 properties");var obj = {a: 1, b: 2};delete obj.a;delete obj.b;QA.ASSERT(CountProperties(obj), 0, "test with deleted properties");}))(qaapi);
((function anonymous(QA) {var db = new Database;var res = db.Query("select \"test\", ?, ?aaa, ?, @0", [5, 6, 7]);QA.ASSERT_STR(res.columnNames.join(","), "\"test\",?,aaa,?,@0", "columns");QA.ASSERT_STR(res.Row(), "test,5,6,7,5", "row");}))(qaapi);
((function anonymous(QA) {var db = new Database;var res1 = db.Query("select 1");res1.columnNames[0];var res2 = db.Query("select 2");QA.ASSERT(res2.columnNames.join(","), "2", "columns name");}))(qaapi);
((function anonymous(QA) {var db = new Database("");db.testFun = function (a) {return a * 10;};db.jseval = function (s) {return eval(s);};var blob = new Blob("qqwe\0\0fv1234");var res = db.Exec("SELECT testFun(123), length(:toto), jseval(\"null\") is null", {toto: blob, aaa: null});QA.ASSERT(res, 1230, "row result");db.Close();}))(qaapi);
((function anonymous(QA) {var db = new Database;var res = db.Exec("select ?+?+?", [2, 3, 4]);QA.ASSERT(res, 9, "addition using question mark");var row = db.Query("SELECT ?+?+?", {0: 2, 1: 2, 2: 2, 3: 2, length: 3}).Row();QA.ASSERT(Number(row), 6, "addition using question mark");db.Close();}))(qaapi);
((function anonymous(QA) {var db = new Database;var res = db.Exec("SELECT @varTest", {varTest: 123});QA.ASSERT(res, 123, "row result");db.Close();}))(qaapi);
((function anonymous(QA) {var db = new Database;var result1 = db.Query("SELECT :toto");result1.toto = new Blob("12\034");QA.ASSERT(result1.Row()[0].length, 5, "using binding");QA.ASSERT(db.changes, 0, "changes");result1.Close();db.Close();}))(qaapi);
((function anonymous(QA) {var db = new Database("test_sqlite_database");db.Close();var file = new File("test_sqlite_database");QA.ASSERT(file.exist, true, "database file exist");file.Delete();QA.ASSERT(file.exist, false, "database file exist");}))(qaapi);
((function anonymous(QA) {var db = new Database;var result = db.Query("SELECT 1 UNION SELECT 2 UNION ALL SELECT 2");QA.ASSERT(result.columnCount, 1, "column count");QA.ASSERT(result.Step(), true, "has a next line");QA.ASSERT(db.lastInsertRowid, 0, "last insert row id");QA.ASSERT(db.changes, 0, "changes");QA.ASSERT(result.columnNames[0], "1", "first column name");QA.ASSERT(result.columnIndexes[1], 0, "col index");result.Reset();QA.ASSERT(result.Row()[0], 1, "row 1");QA.ASSERT(result.Row()[0], 2, "row 2");QA.ASSERT(result.Row()[0], 2, "row 3");}))(qaapi);
((function anonymous(QA) {var db = new Database;try {var res = db.Query("select * from a");QA.FAILED("Failed to throw exception");} catch (ex if ex instanceof SqliteError) {QA.ASSERT(ex.code, 1, "exception code");QA.ASSERT(ex.text, "no such table: a", "exception text");}db.Close();}))(qaapi);
((function anonymous(QA) {var db = new Database;var res = db.Exec("create table a (b integer primary key, c varchar, d integer)");db.Exec("insert into a values (NULL, \"aaa\", 222)");db.Exec("insert into a values (NULL, \"b\", 333)");QA.ASSERT(db.lastInsertRowid, 2, "last insert rowid");QA.ASSERT(db.changes, 1, "changes count");var res = db.Query("select * from a");QA.ASSERT(res.columnCount, 3, "column count");QA.ASSERT(res.columnNames.join(","), "b,c,d", "columns name");QA.ASSERT(res.columnIndexes.b, 0, "column name index");QA.ASSERT(res.columnIndexes.c, 1, "column name index");QA.ASSERT(res.columnIndexes.d, 2, "column name index");var row = res.Row(true);QA.ASSERT(row.c, "aaa", "column by name");res.Reset();var row = res.Row(false);QA.ASSERT(row[1], "aaa", "column by index");var row = res.Row(false);QA.ASSERT(row[1], "b", "column by index");QA.ASSERT(row[2], 333, "column by index");QA.ASSERT(res.Col(0), 2, "column by index using Col");QA.ASSERT(res.Col(1), "b", "column by index using Col");QA.ASSERT(res.Col(2), 333, "column by index using Col");db.Close();}))(qaapi);
((function anonymous(QA) {try {var db = new Database;var res = db.Exec("create table a (id integer primary key, x varchar)");db.Exec("insert into a values (NULL, \"aaa\")");var res = db.Query("select * from a");var row = res.Row(true);QA.ASSERT(row.x, "aaa", "read query result");db.Close();} catch (ex if ex instanceof SqliteError) {QA.FAILED("SqliteError: " + ex.text + "(" + ex.code + ")");}}))(qaapi);
((function anonymous(QA) {var bump = new Texture(100, 100, 1);bump.Resize(300, 300);bump.Convolution([1]);bump.Normals();}))(qaapi);
((function anonymous(QA) {var world = new World;var floor = new GeomPlane(world.space);floor.body = world.env;var a = floor.body;}))(qaapi);
((function anonymous(QA) {new Body(new World);}))(qaapi);
((function anonymous(QA) {QA.ASSERT_STR(Stringify(new Float32Array), "", "stringify empty float array");QA.ASSERT_STR(Stringify(new Int8Array), "", "stringify empty Int8Array");QA.ASSERT_STR(Stringify(new Int8Array([100, 100, 100])), "ddd", "stringify Int8Array \"ddd\"");QA.ASSERT_STR(Stringify(new Uint16Array([100, 100, 100])), "ddd", "stringify Uint16Array \"ddd\"");}))(qaapi);
((function anonymous(QA) {
function JsClass() {this.a = 5;this._serialize = function (ser) {ser.Write(this.a);};this._unserialize = function (unser) {var o = new JsClass;o.a = unser.Read();return o;};}

var ob = new JsClass;ob.a = 7;
function ReferenceError() {try {dgsdfgfvf6z5ef4sdfg();} catch (ex) {return ex;}return undefined;}

var myobj = [ReferenceError(), new Error("error test"), ob, (function () [, 1, {__proto__: null}]), "", "string", {__proto__: null, a: 2}, [], [, , , , , ], [, undefined, "arrayelt"], true, false, void 0, null, 0, 0, -0, 1, 234, NaN, - Infinity, + Infinity, new Blob, new Blob("okmokm"), {a: 1, b: 2, c: {d: 3}}, {}, , new Date, new Number(123), new String(123), <A>B</A>, -2147483648, 4294967295, "a", String(), new Error, new URIError];var s = new Serializer;s.Write(myobj);var s = new Unserializer(String(s.Done()));}))(qaapi);
((function anonymous(QA) {var timeout = TimeoutEvents(123);var t = TimeCounter();ProcessEvents(timeout);t = TimeCounter() - t;QA.ASSERT(t > 122 && t < 130, true, "TimeoutEvents time (" + t + ")");QA.ASSERT_EXCEPTION((function () ProcessEvents(timeout)), Error, "ProcessEvents reused");}))(qaapi);
((function anonymous(QA) {QA.ASSERT_STR(Stringify([100, 101, 102]), "def", "JSArray to string");}))(qaapi);
((function anonymous(QA) {QA.ASSERT_STR(Stringify(Int8Array([100, 101, 102])), "def", "Int8Array to string");}))(qaapi);
((function anonymous(QA) {var i = 10;var res = Stringify({Read: (function (count) i-- ? "Str" : "")});QA.ASSERT_STR(res, "StrStrStrStrStrStrStrStrStrStr", "Stringify StreamRead object");}))(qaapi);
((function anonymous(QA) {var b = new Blob("123");var c = Stringify(b);QA.ASSERT_STR(c, 123, "Stringified blob");}))(qaapi);
((function anonymous(QA) {(new Blob("123")).toSource();var b = new Blob("123");(new Blob).__proto__.toSource.call(b);}))(qaapi);
((function anonymous(QA) {QA.ASSERT("test", Stringify("test"), "force string conversion");var len = 0;var b = new Buffer;for (var i = 0; i < 500; i++) {len += i;b.Write(QA.RandomString(i));}QA.ASSERT(b.length, len, "buffer length");var s = Stringify(b);QA.ASSERT(s.length, len, "string length");}))(qaapi);
((function anonymous(QA) {var buf = new Buffer;buf.Write("abcdefghi");
function myStream() {this.Read = function (amount) {return buf.Read(2);};}

QA.ASSERT(Stringify(new myStream), "abcdefghi", "force string conversion");}))(qaapi);
((function anonymous(QA) {var blob = new Blob("1234");var stream = Stream(blob);blob = blob.concat("ABC");QA.ASSERT(String(stream.Read(3)), "123", "stream Read()");blob = blob.concat("DEF");QA.ASSERT(blob.length, 10, "stream source length");QA.ASSERT(String(stream.Read(3)), "4", "stream Read()");QA.ASSERT(stream.position, 4, "stream position");var s1 = Stream(blob);QA.ASSERT(s1.position, 0, "stream position");QA.ASSERT(s1.available, 10, "stream source length");QA.ASSERT(String(s1.Read(3)), "123", "stream Read()");}))(qaapi);
((function anonymous(QA) {var blob = new Blob("1234567");var stream = Stream(blob);QA.ASSERT(stream.source, blob, "source object");QA.ASSERT(stream.position, 0, "initial stream position");QA.ASSERT(String(stream.Read(3)), "123", "stream Read()");QA.ASSERT(stream.position, 3, "stream position after Read()");QA.ASSERT(String(stream.Read(0)), "", "read 0 bytes on the stream");QA.ASSERT(stream.position, 3, "stream position after Read(0)");QA.ASSERT(String(stream.Read(100)), "4567", "read more than the stream size");QA.ASSERT(stream.position, 7, "stream position after reading more than the stream size");stream.position = 0;QA.ASSERT(String(stream.Read(blob.length)), "1234567", "read the exact length");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(new Blob("abc") == new Blob("xxx"), new String("abc") == new String("xxx"), "new a == b");QA.ASSERT(new Blob("abc") != new Blob("xxx"), new String("abc") != new String("xxx"), "new a != b");QA.ASSERT(new Blob("abc") === new Blob("abc"), new String("abc") === new String("abc"), "new a === a");QA.ASSERT(new Blob("abc") !== new Blob("abc"), new String("abc") !== new String("abc"), "new a !== a");QA.ASSERT(new Blob("abc") === new Blob("xxx"), new String("abc") === new String("xxx"), "new a === b");QA.ASSERT(new Blob("abc") !== new Blob("xxx"), new String("abc") !== new String("xxx"), "new a !== b");QA.ASSERT(!!new Blob(""), !!new String(""), "new !!\"\"");QA.ASSERT(!!new Blob("abc"), !!new String("abc"), "new !!a");QA.ASSERT(Blob("abc") == Blob("abc"), String("abc") == String("abc"), "a == a");QA.ASSERT(Blob("abc") != Blob("abc"), String("abc") != String("abc"), "a != a");QA.ASSERT(Blob("abc") == Blob("xxx"), String("abc") == String("xxx"), "a == b");QA.ASSERT(Blob("abc") != Blob("xxx"), String("abc") != String("xxx"), "a != b");QA.ASSERT(Blob("abc") === Blob("xxx"), String("abc") === String("xxx"), "a === b");QA.ASSERT(Blob("abc") !== Blob("xxx"), String("abc") !== String("xxx"), "a !== b");QA.ASSERT(!!Blob("abc"), !!String("abc"), "!!a");QA.ASSERT(Blob("") == "", String("") == "", "== \"\"");QA.ASSERT(Blob("abc") == "abc", String("abc") == "abc", " Str(a) == \"a\" ");}))(qaapi);
((function anonymous(QA) {var b = new Blob("ABCDEF");QA.ASSERT(b == "ABCDEF", true, "string and Blob equality");QA.ASSERT("ABCDEF" == b, true, "string and Blob equality");QA.ASSERT(b === "ABCDEF", false, "string and Blob equality and same type");QA.ASSERT(Blob("abc") == Blob("abc"), true, "Blob == Blob");QA.ASSERT(Blob("abc") == Blob("xyz"), false, "Blob == Blob");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(!!Blob(""), false, "empty Blob cast to boolean");QA.ASSERT(!!Blob("x"), true, "non-empty Blob cast to boolean");QA.ASSERT(!!Blob(""), false, "empty Blob cast to boolean");QA.ASSERT(!!Blob("a"), true, "empty Blob cast to boolean");}))(qaapi);
((function anonymous(QA) {var b = new Blob("ABCDEF");}))(qaapi);
((function anonymous(QA) {var b = new Blob("ABCDEF");var s = "ABCDEF";QA.ASSERT("" + b.substring(-6), s.substring(-6), "substring");QA.ASSERT("" + b.substring(-1), s.substring(-1), "substring");QA.ASSERT("" + b.substring(0), s.substring(0), "substring");QA.ASSERT("" + b.substring(1), s.substring(1), "substring");QA.ASSERT("" + b.substring(2), s.substring(2), "substring");QA.ASSERT("" + b.substring(5), s.substring(5), "substring");QA.ASSERT("" + b.substring(6), s.substring(6), "substring");QA.ASSERT("" + b.substring(7), s.substring(7), "substring");QA.ASSERT("" + b.substring(2, 3), s.substring(2, 3), "substring");QA.ASSERT("" + b.substring(-2, 2), s.substring(-2, 2), "substring");QA.ASSERT("" + b.substring(-2, 3), s.substring(-2, 3), "substring");QA.ASSERT("" + b.substring(0, 6), s.substring(0, 6), "substring");QA.ASSERT("" + b.substring(0, 7), s.substring(0, 7), "substring");QA.ASSERT("" + b.substring(0, -2), s.substring(0, -2), "substring");QA.ASSERT("" + b.substring(-7, 2), s.substring(-7, 2), "substring");for (var i = -10; i <= 10; i++) {QA.ASSERT("" + b.substring(i), s.substring(i), "substring(" + i + ")");for (var j = -10; j <= 10; j++) {QA.ASSERT("" + b.substring(i, j), s.substring(i, j), "substring(" + i + "," + j + ")");}}QA.ASSERT(b instanceof Blob && !(b instanceof String), true, "b is a Blob, not a String");}))(qaapi);
((function anonymous(QA) {var b = new Blob;b = b.concat("ABCD");QA.ASSERT(String(b), "ABCD", "content");QA.ASSERT(b.length, 4, "length");QA.ASSERT(b[0], "A", "first item");QA.ASSERT(b[3], "D", "last item");QA.ASSERT(b[2], "C", "[] operator");QA.ASSERT(b[4], undefined, "[] operator");QA.ASSERT(b[4], undefined, "after last item");b = b.concat("XYZ");QA.ASSERT(b.length, 7, "length");QA.ASSERT(b[6], "Z", "last item");QA.ASSERT(b.toString(), "ABCDXYZ", "toString");QA.ASSERT(String(b.valueOf()), "ABCDXYZ", "valueof");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(Blob("567").valueOf(), "567", "value of");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(Blob("345").toString(), "345", "string value");}))(qaapi);
((function anonymous(QA) {var bstr = Blob("98765");QA.ASSERT(String(bstr), "98765", "string value");var v = Blob("123");QA.ASSERT(typeof v, "object", "variable type");QA.ASSERT(String(v), "123", "content");}))(qaapi);
((function anonymous(QA) {var bstr = new Blob("98765");QA.ASSERT(String(bstr), "98765", "string value");}))(qaapi);
((function anonymous(QA) {
function argGenerator(count, argList) {var len = argList.length;var pos = Math.pow(len, count);var arg = new Array(count);while (pos--) {var tmp = pos;for (var i = 0; i < count; i++) {var r = tmp % len;tmp = (tmp - r) / len;arg[i] = argList[r];}yield arg;}}

var s = "abcdefgh";var b = Blob(s);var argGen = argGenerator(2, [undefined, NaN, - Infinity, -2147483649, -2147483648, -65535, -1000, -100, -10, -3, -2.5, -2, -1, -0.6, -0.5, -0.4, 0, 0.4, 0.5, 0.6, 1, 2, 2.5, 3, 10, 100, 1000, + Infinity, "", " ", "0", "1"]);try {for (;;) {var args = argGen.next();QA.ASSERT_STR(s.substr.apply(s, args), b.substr.apply(b, args), "substr(" + args.toSource() + ")");QA.ASSERT_STR(s.substring.apply(s, args), b.substring.apply(b, args), "substring(" + args.toSource() + ")");}} catch (ex if ex instanceof StopIteration) {}}))(qaapi);
((function anonymous(QA) {var b1 = new Blob("abcdef");var b2 = b1.concat("123");QA.ASSERT_STR(b2, "abcdef123", "concat result");QA.ASSERT(b1 instanceof Blob, true, "is Blob");QA.ASSERT(b1 instanceof String, false, "is not String");QA.ASSERT_TYPE(b2, Blob);QA.ASSERT(b2 instanceof String, false, "is not String");}))(qaapi);
((function anonymous(QA) {var buffer = new Buffer;buffer.Write("123");var blob = buffer.Read(2);QA.ASSERT(blob.length, 2, "buffer.Read() length");QA.ASSERT(typeof blob, "string", "typeof blob");}))(qaapi);
((function anonymous(QA) {var b = new Blob("test");QA.ASSERT(b.toSource(), "\"test\"", "blob.toSource()");QA.ASSERT(uneval(b), "\"test\"", "uneval(blob)");}))(qaapi);
((function anonymous(QA) {var length = 1048576;var times = 3;QA.GC();var data = [];var mem0 = privateMemoryUsage;for (var i = 0; i < times; ++i) {data.push(Blob(StringRepeat("a", length)));QA.GC();}var mem = (privateMemoryUsage - mem0) / length / times;QA.ASSERT(mem > 1 && mem < 1.02, true, "Blob memory usage (" + mem + ") (test not available on all platforms)");}))(qaapi);
((function anonymous(QA) {var tmp = "";var b = new Blob("ABC123");for (c in b) {tmp += c;}QA.ASSERT(tmp, "012345", "for loop over Blob");var tmp = "";var b = new Blob("ABC123");for each (c in b) {tmp += c;}QA.ASSERT(tmp, "ABC123", "for-each  loop over Blob");}))(qaapi);
((function anonymous(QA) {
function tests(CHK, T) {CHK(T("abcd").split("", 0));CHK(T("abcd").split("", 1));CHK(T("abcd").split("", 2));CHK(T("abcd").split("", 3));CHK(T("abcd").split("", 4));CHK(T("abcd").split("", 5));CHK(T("a").split("", 0));CHK(T("a").split("", 1));CHK(T("a").split("", 2));CHK(T("").split("", 0));CHK(T("").split("", 1));CHK(T("").split("", 2));CHK(T("").split(""));CHK(T("1").split(""));CHK(T("").split("1"));CHK(T("1").split("1"));CHK(T("abcd").split(""));CHK(T("").split(""));CHK(T("abcd").split("abcd"));CHK(T("ababababab").split("a", 3));CHK(T("12").split(undefined));CHK(T("12").split("a"));CHK(T("1a23aa").split("a"));CHK(T("aaa|bbb|ccc").split("|"));CHK(T("aaa||bbb||ccc").split("|"));CHK(T("aaa||bbb||ccc").split("||"));}

var res1 = [];var res2 = [];tests((function (r) res1.push(r)), String);tests((function (r) res2.push(r)), Blob);QA.ASSERT(uneval(res1), uneval(res2), "all split() test");}))(qaapi);
((function anonymous(QA) {var stream = new Stream("456");QA.ASSERT(!isNaN(stream._NI_StreamRead), true, "NativeInterface system");}))(qaapi);
((function anonymous(QA) {
function TestCase(section, name, expected, result) QA.ASSERT_STR(result, expected, name);


function AssertBlob(b) b instanceof Blob;

var SECTION = "";new TestCase(SECTION, "var s = new Blob('this is a string object'); typeof s.substring()", "object", eval("var s = new Blob('this is a string object'); typeof s.substring()"));new TestCase(SECTION, "var s = new Blob(''); s.substring(1,0)", "", eval("var s = new Blob(''); s.substring(1,0)"));new TestCase(SECTION, "var s = new Blob('this is a string object'); s.substring(true, false)", "t", eval("var s = new Blob('this is a string object'); s.substring(false, true)"));new TestCase(SECTION, "var s = new Blob('this is a string object'); s.substring(NaN, Infinity)", "this is a string object", eval("var s = new Blob('this is a string object'); s.substring(NaN, Infinity)"));new TestCase(SECTION, "var s = new Blob('this is a string object'); s.substring(Infinity, NaN)", "this is a string object", eval("var s = new Blob('this is a string object'); s.substring(Infinity, NaN)"));new TestCase(SECTION, "var s = new Blob('this is a string object'); s.substring(Infinity, Infinity)", "", eval("var s = new Blob('this is a string object'); s.substring(Infinity, Infinity)"));new TestCase(SECTION, "var s = new Blob('this is a string object'); s.substring(-0.01, 0)", "", eval("var s = new Blob('this is a string object'); s.substring(-0.01,0)"));new TestCase(SECTION, "var s = new Blob('this is a string object'); s.substring(s.length, s.length)", "", eval("var s = new Blob('this is a string object'); s.substring(s.length, s.length)"));new TestCase(SECTION, "var s = new Blob('this is a string object'); s.substring(s.length+1, 0)", "this is a string object", eval("var s = new Blob('this is a string object'); s.substring(s.length+1, 0)"));new TestCase(SECTION, "var s = new Blob('this is a string object'); s.substring(-Infinity, -Infinity)", "", eval("var s = new Blob('this is a string object'); s.substring(-Infinity, -Infinity)"));}))(qaapi);
((function anonymous(QA) {
function TestCase(section, name, expected, result) QA.ASSERT(result, expected, name);

var SECTION = "";var foo = new Blob("hello");new TestCase(SECTION, "var foo = new Blob('hello');foo.charCodeAt(0)", 104, foo.charCodeAt(0));new TestCase(SECTION, "var foo = new Blob('hello');foo.charCodeAt(1)", 101, foo.charCodeAt(1));new TestCase(SECTION, "var foo = new Blob('hello');foo.charCodeAt(2)", 108, foo.charCodeAt(2));new TestCase(SECTION, "var foo = new Blob('hello');foo.charCodeAt(3)", 108, foo.charCodeAt(3));new TestCase(SECTION, "var foo = new Blob('hello');foo.charCodeAt(4)", 111, foo.charCodeAt(4));new TestCase(SECTION, "var foo = new Blob('hello');foo.charCodeAt(-1)", Number.NaN, foo.charCodeAt(-1));new TestCase(SECTION, "var foo = new Blob('hello');foo.charCodeAt(5)", Number.NaN, foo.charCodeAt(5));var boo = new Blob(true);new TestCase(SECTION, "var boo = new Blob(true);boo.charCodeAt(0)", 116, boo.charCodeAt(0));new TestCase(SECTION, "var boo = new Blob(true);boo.charCodeAt(1)", 114, boo.charCodeAt(1));new TestCase(SECTION, "var boo = new Blob(true);boo.charCodeAt(2)", 117, boo.charCodeAt(2));new TestCase(SECTION, "var boo = new Blob(true);boo.charCodeAt(3)", 101, boo.charCodeAt(3));var noo = new Blob(Math.PI);new TestCase(SECTION, "var noo = new Blob(Math.PI);noo.charCodeAt(0)", 51, noo.charCodeAt(0));new TestCase(SECTION, "var noo = new Blob(Math.PI);noo.charCodeAt(1)", 46, noo.charCodeAt(1));new TestCase(SECTION, "var noo = new Blob(Math.PI);noo.charCodeAt(2)", 49, noo.charCodeAt(2));new TestCase(SECTION, "var noo = new Blob(Math.PI);noo.charCodeAt(3)", 52, noo.charCodeAt(3));new TestCase(SECTION, "var noo = new Blob(Math.PI);noo.charCodeAt(4)", 49, noo.charCodeAt(4));new TestCase(SECTION, "var noo = new Blob(Math.PI);noo.charCodeAt(5)", 53, noo.charCodeAt(5));new TestCase(SECTION, "var noo = new Blob(Math.PI);noo.charCodeAt(6)", 57, noo.charCodeAt(6));var noo = new Blob(null);new TestCase(SECTION, "var noo = new Blob(null);noo.charCodeAt(0)", 110, noo.charCodeAt(0));new TestCase(SECTION, "var noo = new Blob(null);noo.charCodeAt(1)", 117, noo.charCodeAt(1));new TestCase(SECTION, "var noo = new Blob(null);noo.charCodeAt(2)", 108, noo.charCodeAt(2));new TestCase(SECTION, "var noo = new Blob(null);noo.charCodeAt(3)", 108, noo.charCodeAt(3));new TestCase(SECTION, "var noo = new Blob(null);noo.charCodeAt(4)", NaN, noo.charCodeAt(4));var noo = new Blob(void 0);new TestCase(SECTION, "var noo = new Blob(void 0);noo.charCodeAt(0)", 117, noo.charCodeAt(0));new TestCase(SECTION, "var noo = new Blob(void 0);noo.charCodeAt(1)", 110, noo.charCodeAt(1));new TestCase(SECTION, "var noo = new Blob(void 0);noo.charCodeAt(2)", 100, noo.charCodeAt(2));new TestCase(SECTION, "var noo = new Blob(void 0);noo.charCodeAt(3)", 101, noo.charCodeAt(3));new TestCase(SECTION, "var noo = new Blob(void 0);noo.charCodeAt(4)", 102, noo.charCodeAt(4));var aString = new Blob("tEs5");TestCase(SECTION, "aString.charCodeAt(-2)", NaN, aString.charCodeAt(-2));TestCase(SECTION, "aString.charCodeAt(-1)", NaN, aString.charCodeAt(-1));TestCase(SECTION, "aString.charCodeAt( 0)", 116, aString.charCodeAt(0));TestCase(SECTION, "aString.charCodeAt( 1)", 69, aString.charCodeAt(1));TestCase(SECTION, "aString.charCodeAt( 2)", 115, aString.charCodeAt(2));TestCase(SECTION, "aString.charCodeAt( 3)", 53, aString.charCodeAt(3));TestCase(SECTION, "aString.charCodeAt( 4)", NaN, aString.charCodeAt(4));TestCase(SECTION, "aString.charCodeAt( 5)", NaN, aString.charCodeAt(5));TestCase(SECTION, "aString.charCodeAt( Infinity)", NaN, aString.charCodeAt(Infinity));TestCase(SECTION, "aString.charCodeAt(-Infinity)", NaN, aString.charCodeAt(- Infinity));QA.ASSERT(aString instanceof Blob && !(aString instanceof String), true, "no mutation");}))(qaapi);
((function anonymous(QA) {
function TestCase(section, name, expected, result) QA.ASSERT(result, expected, name);

var SECTION = "";var x;new TestCase(SECTION, "x = new Blob(); x.charAt(0)", "", eval("x=new Blob();x.charAt(0)"));new TestCase(SECTION, "x = new Blob(); x.charAt(1)", "", eval("x=new Blob();x.charAt(1)"));new TestCase(SECTION, "x = new Blob(); x.charAt(-1)", "", eval("x=new Blob();x.charAt(-1)"));new TestCase(SECTION, "x = new Blob(); x.charAt(NaN)", "", eval("x=new Blob();x.charAt(Number.NaN)"));new TestCase(SECTION, "x = new Blob(); x.charAt(Number.POSITIVE_INFINITY)", "", eval("x=new Blob();x.charAt(Number.POSITIVE_INFINITY)"));new TestCase(SECTION, "x = new Blob(); x.charAt(Number.NEGATIVE_INFINITY)", "", eval("x=new Blob();x.charAt(Number.NEGATIVE_INFINITY)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(0)", "1", eval("var MYOB = new Blob(1234567890); MYOB.charAt(0)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(1)", "2", eval("var MYOB = new Blob(1234567890); MYOB.charAt(1)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(2)", "3", eval("var MYOB = new Blob(1234567890); MYOB.charAt(2)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(3)", "4", eval("var MYOB = new Blob(1234567890); MYOB.charAt(3)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(4)", "5", eval("var MYOB = new Blob(1234567890); MYOB.charAt(4)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(5)", "6", eval("var MYOB = new Blob(1234567890); MYOB.charAt(5)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(6)", "7", eval("var MYOB = new Blob(1234567890); MYOB.charAt(6)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(7)", "8", eval("var MYOB = new Blob(1234567890); MYOB.charAt(7)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(8)", "9", eval("var MYOB = new Blob(1234567890); MYOB.charAt(8)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(9)", "0", eval("var MYOB = new Blob(1234567890); MYOB.charAt(9)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(10)", "", eval("var MYOB = new Blob(1234567890); MYOB.charAt(10)"));new TestCase(SECTION, "var MYOB = new Blob(1234567890); MYOB.charAt(Math.PI)", "4", eval("var MYOB = new Blob(1234567890); MYOB.charAt(Math.PI)"));}))(qaapi);
((function anonymous(QA) {var TEST_STRING = new String(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
function TestCase(section, name, expected, result) QA.ASSERT(result, expected, name);

var SECTION = "";
function LastIndexOf(string, search, position) arguments.length == 3 ? string.lastIndexOf(search, position) : string.lastIndexOf(search);

QA.ASSERT(delete Blob.prototype.lastIndexOf.length, false, "delete Blob.prototype.lastIndexOf.length");TestCase(SECTION, "var s = new Blob(''); s.lastIndexOf('', 0)", LastIndexOf("", "", 0), eval("var s = new Blob(''); s.lastIndexOf('', 0)"));TestCase(SECTION, "var s = new Blob(''); s.lastIndexOf('')", LastIndexOf("", ""), eval("var s = new Blob(''); s.lastIndexOf('')"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('', 0)", LastIndexOf("hello", "", 0), eval("var s = new Blob('hello'); s.lastIndexOf('',0)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('')", LastIndexOf("hello", ""), eval("var s = new Blob('hello'); s.lastIndexOf('')"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll')", LastIndexOf("hello", "ll"), eval("var s = new Blob('hello'); s.lastIndexOf('ll')"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', 0)", LastIndexOf("hello", "ll", 0), eval("var s = new Blob('hello'); s.lastIndexOf('ll', 0)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', 1)", LastIndexOf("hello", "ll", 1), eval("var s = new Blob('hello'); s.lastIndexOf('ll', 1)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', 2)", LastIndexOf("hello", "ll", 2), eval("var s = new Blob('hello'); s.lastIndexOf('ll', 2)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', 3)", LastIndexOf("hello", "ll", 3), eval("var s = new Blob('hello'); s.lastIndexOf('ll', 3)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', 4)", LastIndexOf("hello", "ll", 4), eval("var s = new Blob('hello'); s.lastIndexOf('ll', 4)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', 5)", LastIndexOf("hello", "ll", 5), eval("var s = new Blob('hello'); s.lastIndexOf('ll', 5)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', 6)", LastIndexOf("hello", "ll", 6), eval("var s = new Blob('hello'); s.lastIndexOf('ll', 6)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', 1.5)", LastIndexOf("hello", "ll", 1.5), eval("var s = new Blob('hello'); s.lastIndexOf('ll', 1.5)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', 2.5)", LastIndexOf("hello", "ll", 2.5), eval("var s = new Blob('hello'); s.lastIndexOf('ll', 2.5)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', -1)", LastIndexOf("hello", "ll", -1), eval("var s = new Blob('hello'); s.lastIndexOf('ll', -1)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', -1.5)", LastIndexOf("hello", "ll", -1.5), eval("var s = new Blob('hello'); s.lastIndexOf('ll', -1.5)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', -Infinity)", LastIndexOf("hello", "ll", - Infinity), eval("var s = new Blob('hello'); s.lastIndexOf('ll', -Infinity)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', Infinity)", LastIndexOf("hello", "ll", Infinity), eval("var s = new Blob('hello'); s.lastIndexOf('ll', Infinity)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', NaN)", LastIndexOf("hello", "ll", NaN), eval("var s = new Blob('hello'); s.lastIndexOf('ll', NaN)"));TestCase(SECTION, "var s = new Blob('hello'); s.lastIndexOf('ll', -0)", LastIndexOf("hello", "ll", -0), eval("var s = new Blob('hello'); s.lastIndexOf('ll', -0)"));var i, k, j = 0;for (k = 0, i = 33; i < 126; i++, j++, k++) {new TestCase(SECTION, "String.lastIndexOf(" + String.fromCharCode(i) + ", 0)", -1, TEST_STRING.lastIndexOf(String.fromCharCode(i), 0));}for (k = 0, i = 32; i < 126; i++, j++, k++) {new TestCase(SECTION, "String.lastIndexOf(" + String.fromCharCode(i) + ", " + k + ")", k, TEST_STRING.lastIndexOf(String.fromCharCode(i), k));}for (k = 0, i = 32; i < 126; i++, j++, k++) {new TestCase(SECTION, "String.lastIndexOf(" + String.fromCharCode(i) + ", " + k + 1 + ")", k, TEST_STRING.lastIndexOf(String.fromCharCode(i), k + 1));}for (k = 9, i = 33; i < 125; i++, j++, k++) {new TestCase(SECTION, "String.lastIndexOf(" + (String.fromCharCode(i) + String.fromCharCode(i + 1) + String.fromCharCode(i + 2)) + ", " + 0 + ")", LastIndexOf(TEST_STRING, String.fromCharCode(i) + String.fromCharCode(i + 1) + String.fromCharCode(i + 2), 0), TEST_STRING.lastIndexOf(String.fromCharCode(i) + String.fromCharCode(i + 1) + String.fromCharCode(i + 2), 0));}for (k = 0, i = 32; i < 125; i++, j++, k++) {new TestCase(SECTION, "String.lastIndexOf(" + (String.fromCharCode(i) + String.fromCharCode(i + 1) + String.fromCharCode(i + 2)) + ", " + k + ")", k, TEST_STRING.lastIndexOf(String.fromCharCode(i) + String.fromCharCode(i + 1) + String.fromCharCode(i + 2), k));}for (k = 0, i = 32; i < 125; i++, j++, k++) {new TestCase(SECTION, "String.lastIndexOf(" + (String.fromCharCode(i) + String.fromCharCode(i + 1) + String.fromCharCode(i + 2)) + ", " + k + 1 + ")", k, TEST_STRING.lastIndexOf(String.fromCharCode(i) + String.fromCharCode(i + 1) + String.fromCharCode(i + 2), k + 1));}for (k = 0, i = 32; i < 125; i++, j++, k++) {new TestCase(SECTION, "String.lastIndexOf(" + (String.fromCharCode(i) + String.fromCharCode(i + 1) + String.fromCharCode(i + 2)) + ", " + (k - 1) + ")", LastIndexOf(TEST_STRING, String.fromCharCode(i) + String.fromCharCode(i + 1) + String.fromCharCode(i + 2), k - 1), TEST_STRING.lastIndexOf(String.fromCharCode(i) + String.fromCharCode(i + 1) + String.fromCharCode(i + 2), k - 1));}new TestCase(SECTION, "String.lastIndexOf(" + TEST_STRING + ", 0 )", 0, TEST_STRING.lastIndexOf(TEST_STRING, 0));new TestCase(SECTION, "String.lastIndexOf(" + TEST_STRING + ", 1 )", 0, TEST_STRING.lastIndexOf(TEST_STRING, 1));new TestCase(SECTION, "String.lastIndexOf(" + TEST_STRING + ")", 0, TEST_STRING.lastIndexOf(TEST_STRING));}))(qaapi);
((function anonymous(QA) {
function TestCase(section, name, expected, result) QA.ASSERT(result, expected, name);

var SECTION = "";var aString = new Blob("test string");var bString = new Blob(" another ");TestCase(SECTION, "aString.concat(' more')", "test string more", aString.concat(" more").toString());TestCase(SECTION, "aString.concat(bString)", "test string another ", aString.concat(bString).toString());TestCase(SECTION, "aString                ", "test string", aString.toString());TestCase(SECTION, "bString                ", " another ", bString.toString());TestCase(SECTION, "aString.concat(345)    ", "test string345", aString.concat(345).toString());TestCase(SECTION, "aString.concat(true)   ", "test stringtrue", aString.concat(true).toString());TestCase(SECTION, "aString.concat(null)   ", "test stringnull", aString.concat(null).toString());TestCase(SECTION, "'abcde'.concat(bString)", "abcde another ", "abcde".concat(bString).toString());QA.ASSERT(aString instanceof Blob && !(aString instanceof String), true, "no mutation");QA.ASSERT(bString instanceof Blob && !(bString instanceof String), true, "no mutation");}))(qaapi);
((function anonymous(QA) {QA.ASSERT("currentDirectory" in global, true, "has currentDirectory");QA.ASSERT(typeof currentDirectory, "string", "current directory");QA.ASSERT(currentDirectory.length >= 1, true, "current directory length");}))(qaapi);
((function anonymous(QA) {do {switch (systemInfo.name) {case "Windows_NT":var cmd = GetEnv("ComSpec");var args = ["/c", "cd"];break;case "Linux":var cmd = GetEnv("SHELL");var args = ["-c", "ls"];break;default:QA.FAILED("(TBD) no test available for this system.");break;}var process = new Process(cmd, args);process.Detach();} while (false);}))(qaapi);
((function anonymous(QA) {switch (systemInfo.name) {case "Windows_NT":var cmdPath = GetEnv("ComSpec");QA.ASSERT(cmdPath.indexOf("cmd") != -1, true, "cmd.exe path");var process = new Process(cmdPath, ["/c", "cd"]);QA.ASSERT_TYPE(process.stdin, Descriptor, "process stdin type");QA.ASSERT_TYPE(process.stdout, Descriptor, "process stdout type");QA.ASSERT_TYPE(process.stderr, Descriptor, "process stderr type");QA.ASSERT(process.stdout.Read(10).length, 10, "reading Process stdout");break;default:QA.FAILED("(TBD) no test available for this system.");}}))(qaapi);
((function anonymous(QA) {var f = new File("qa_tmp_dir.txt");f.content = "test";var dir = Directory.List("./.", Directory.SKIP_BOTH | Directory.SKIP_DIRECTORY | Directory.SKIP_OTHER);QA.ASSERT(dir.indexOf("qa_tmp_dir.txt") != -1, true, "directory listing");f.content = undefined;}))(qaapi);
((function anonymous(QA) {var f = new File("qa_tmp_notfound.txt");try {f.Open(File.RDONLY);} catch (ex if ex instanceof IoError) {QA.ASSERT(ex.code, -5950, "IoError code");QA.ASSERT(ex.text, "File not found", "IoError text");QA.ASSERT(ex.os != 0, true, "OS code");} catch (ex) {QA.ASSERT(false, true, "IoError type");}}))(qaapi);
((function anonymous(QA) {var f = new File(QA.RandomString(10));var data = String(new Date);QA.ASSERT(f.exist, false, "file exist");f.content = data;QA.ASSERT(f.exist, true, "file exist");QA.ASSERT_STR(f.content, data, "file content");f.content = undefined;QA.ASSERT(f.exist, false, "file exist");var f = new File(QA.RandomString(10));QA.ASSERT(f.content, undefined, "file2 does not exist");}))(qaapi);
((function anonymous(QA) {var f = new File("qa_tmp_file_FileInfo.txt");QA.ASSERT(f.exist, false, "file delete");f.content = "xx";QA.ASSERT(f.info.size, 2, "file size");QA.ASSERT(Math.abs(f.info.modifyTime - (new Date).getTime()) < 2000, true, "file date");f.content = "xxx";QA.ASSERT(f.info.size, 3, "file size");QA.ASSERT(f.info.type, File.FILE_FILE, "file type");f.Delete();}))(qaapi);
((function anonymous(QA) {var f = new File("qa_tmp_file.txt");f.Open(File.CREATE_FILE | File.RDWR);f.Write("abcd");QA.ASSERT(f.exist, true, "file exist");f.Close();f.Open(File.CREATE_FILE | File.RDWR);f.Seek(1);QA.ASSERT_STR(f.Read(), "bcd", "read file");f.Close();f.Delete();QA.ASSERT(f.exist, false, "file delete");}))(qaapi);
((function anonymous(QA) {var fileName = "qa" + QA.RandomString(10);var mem = new SharedMemory(fileName, 100);mem.content = "xxxxxx789";mem.Write("xxx456");mem.Write("123", 0);mem.Write("ABC", 9);var mem2 = new SharedMemory(fileName, 100);QA.ASSERT_STR(mem2.Read(), "123456789ABC", "content");QA.ASSERT(mem2.content.length, 12, "used memory length");QA.ASSERT_STR(mem2.content, "123456789ABC", "content");mem2.Write("Z", 99);QA.ASSERT_STR(mem.Read(1, 99), "Z", "writing at the end");mem.Close();mem2.Close();QA.ASSERT((new File(fileName)).exist, false, "SharedMemory file has been removed (linux only ?)");}))(qaapi);
((function anonymous(QA) {var fileName = "qa" + QA.RandomString(10);var mem = new SharedMemory(fileName, 100);mem.content = "xxxxxx789";mem.Write("xxx456");mem.Write("123", 0);mem.Write("ABC", 9);QA.ASSERT_STR(mem.Read(), "123456789ABC", "content");QA.ASSERT_STR(mem.content, "123456789ABC", "content");mem.Close();QA.ASSERT((new File(fileName)).exist, false, "SharedMemory file has been removed (linux only ?)");}))(qaapi);
((function anonymous(QA) {var fileName = "qa" + QA.RandomString(10);var mem = new SharedMemory(fileName, 100);mem.content = " abcdef ";QA.ASSERT_STR(mem.content, " abcdef ", "content");mem.Close();QA.ASSERT((new File(fileName)).exist, false, "SharedMemory file has been removed (linux only ?)");}))(qaapi);
((function anonymous(QA) {var soc = new Socket;QA.ASSERT(soc.type, Descriptor.DESC_SOCKET_TCP, "descriptor type");QA.ASSERT(soc.closed, false, "socket is not closed");soc.Close();QA.ASSERT(soc.closed, true, "socket is closed");}))(qaapi);
((function anonymous(QA) {var s = [];for (var i = 0; i < 1000; i++) {s.push(new Socket(Socket.TCP));}while (s.length) {s.pop().Close();}}))(qaapi);
((function anonymous(QA) {var count = 0;var dlist = [];var step = 0;var serverSocket = new Socket;serverSocket.reuseAddr = true;serverSocket.nonblocking = true;serverSocket.exception = function (s) {QA.ASSERT(true, false, "serverSocket.exception");};serverSocket.readable = function (s) {var incomingClient = s.Accept();dlist.push(incomingClient);incomingClient.readable = function (s) {QA.ASSERT(IsReadable(s), true, "socket is readable");QA.ASSERT(IsWritable(s), true, "socket is writable");QA.ASSERT_STR(s.Read(), "1234", "read data match");count++;};};serverSocket.Bind(9998, "127.0.0.1");QA.ASSERT(GetObjectPrivate(serverSocket) != 0, true, "descriptor");serverSocket.Listen();dlist.push(serverSocket);var clientSocket = new Socket;clientSocket.nonblocking = true;QA.ASSERT(clientSocket.nonblocking, true, "non blocking state");clientSocket.exception = function (s) {QA.ASSERT(true, false, "client.exception");};clientSocket.Connect("localhost", 9998);Sleep(50);QA.ASSERT(IsReadable(clientSocket), false, "socket is readable");QA.ASSERT(IsWritable(clientSocket), true, "socket is writable");dlist.push(clientSocket);for (var i = 0; i < 10; i++) {Poll(dlist, 10);if (!(++step % 4)) {clientSocket.Write("1234");}}while (dlist.length) {dlist.pop().Close();}}))(qaapi);
((function anonymous(QA) {var t0 = IntervalNow();var count = Poll([], 100);var t = IntervalNow() - t0;QA.ASSERT(count, 0, "descriptor event count");QA.ASSERT(t >= 99 && t < 150, true, "poll timeout (may fail if high CPU load) t=" + t);}))(qaapi);
((function anonymous(QA) {var res = Socket.GetHostsByName("localhost");QA.ASSERT(res.indexOf("127.0.0.1") != -1, true, "localhost is 127.0.0.1");var res = Socket.GetHostsByName(QA.RandomString(25));QA.ASSERT_TYPE(res, Array);QA.ASSERT(res.length, 0, "find nonexistent hostName");}))(qaapi);
((function anonymous(QA) {switch (systemInfo.name) {case "Windows_NT":QA.ASSERT(GetEnv("COMPUTERNAME").toLowerCase(), hostName.toLowerCase(), "COMPUTERNAME and hostName");break;default:QA.FAILED("(TBD) no test available for this system.");}}))(qaapi);
((function anonymous(QA) {var cmdPath = GetEnv("ComSpec");var process = new Process(cmdPath, ["/c", "cd"]);QA.ASSERT(process.stdout instanceof Descriptor, true, "stdout instanceof Descriptor");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(GetEnv("PATH").length > 1, true, "get an environment");QA.ASSERT(GetEnv("sdfrwetwergfqwuyoruiqwye"), undefined, "undefined environment variable");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(GetRandomNoise(1).length, 1, "random noise 1 byte");QA.ASSERT(GetRandomNoise(3).length, 3, "random noise 3 bytes");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(physicalMemorySize == physicalMemorySize && physicalMemorySize > 1000000, true, "physical Memory Size");}))(qaapi);
((function anonymous(QA) {QA.ASSERT(typeof systemInfo, "object", "system info");var res = delete systemInfo.architecture;QA.ASSERT(res, false, "delete a property");var res = delete systemInfo.name;QA.ASSERT(res, false, "delete a property");var res = delete systemInfo.release;QA.ASSERT(res, false, "delete a property");QA.ASSERT_HAS_PROPERTIES(systemInfo, "architecture,name,release");}))(qaapi);
((function anonymous(QA) {var filename = QA.RandomString(10);
function Copy(fromFilename, toFilename) {var fromFile = (new File(fromFilename)).Open(File.RDONLY);var toFile = (new File(toFilename)).Open(File.WRONLY | File.CREATE_FILE | File.TRUNCATE);for (var buf; buf = fromFile.Read(65536);) {toFile.Write(buf);}toFile.Close();fromFile.Close();}

var file = (new File(filename)).Open("w");for (var i = 0; i < 1000; i++) {file.Write(StringRepeat("z", 1024));}file.Close();Copy(filename, "copy_" + filename);var cf = new File("copy_" + filename);QA.ASSERT(cf.info.size, 1024000, "copied file size");cf.Open("r");QA.ASSERT_STR(cf.Read(), StringRepeat("z", 1024000), "copied data");cf.Close();cf.Delete();file.Delete();}))(qaapi);
((function anonymous(QA) {var filename = QA.RandomString(10);var f1 = (new File(filename)).Open("w");var f2 = (new File(filename)).Open("r");f1.Write("1234");QA.ASSERT_STR(f2.Read(5), "1234");f1.Write("56");QA.ASSERT_STR(f2.Read(1), "5");QA.ASSERT_STR(f2.Read(1), "6");QA.ASSERT(f2.Read(1), undefined);QA.ASSERT(f2.Read(), undefined);f1.Write("78");QA.ASSERT_STR(f2.Read(), "78");QA.ASSERT(f2.Read(), undefined);f1.Write("9");QA.ASSERT_STR(f2.Read(), "9");QA.ASSERT(f2.Read(), undefined);f1.Write("");QA.ASSERT(f2.Read(), undefined);var str = StringRepeat("x", 1023);f1.Write(str);QA.ASSERT_STR(f2.Read(), str);var str = StringRepeat("x", 1024);f1.Write(str);QA.ASSERT_STR(f2.Read(), str);var str = StringRepeat("x", 1025);f1.Write(str);QA.ASSERT_STR(f2.Read(), str);QA.ASSERT(f2.Read(), undefined);var str = StringRepeat("x", 1000000);f1.Write(str);QA.ASSERT_STR(f2.Read(), str);QA.ASSERT(f2.Read(), undefined);f1.Close();f2.Close();(new File(filename)).content = undefined;}))(qaapi);
((function anonymous(QA) {var conv = new Iconv("850", "UTF-8");conv.invalidChar = " ";var result = conv("\xC3");QA.ASSERT(conv.hasIncompleteSequence, true, "incomplete sequence");conv();QA.ASSERT(conv.hasIncompleteSequence, false, "reset");var result = conv("\xC3");QA.ASSERT(conv.hasIncompleteSequence, true, "first part");result += conv("\xA9");QA.ASSERT(conv.hasIncompleteSequence, false, "last part");}))(qaapi);
((function anonymous(QA) {var utf8str = "\xC3\xA9t\xC3\xA9 \xC3\xA0 la plage";var conv = new Iconv(Iconv.jsUC, "UTF-8", true, false);var result = conv(utf8str);QA.ASSERT_STR(result, "\xE9t\xE9 \xE0 la plage", "check the intermediate");var conv = new Iconv("ISO-8859-1", Iconv.jsUC, false, true);QA.ASSERT_STR(conv(result), "\xE9t\xE9 \xE0 la plage", "check the resulting string");}))(qaapi);
((function anonymous(QA) {var conv = new Iconv(Iconv.jsUC, "ISO-8859-1", true, false);var src = "zl";var res = conv(src);QA.ASSERT(res.length, 2, "check the resulting string length");QA.ASSERT_STR(res, "zl", "check the resulting string");}))(qaapi);
((function anonymous(QA) {var conv = new Iconv(Iconv.jsUC, "ISO-8859-1", true, false);var res = conv("\xE9t\xE9");QA.ASSERT(res.length, 3, "\"\xE9t\xE9\" UC string length");QA.ASSERT(res, "\xE9t\xE9", "string test");}))(qaapi);
((function anonymous(QA) {var conv = new Iconv("UTF-8", "ISO-8859-1", false, false);var res = conv("\xE9t\xE9");QA.ASSERT(res.length, 5, "UC string length");var conv = new Iconv("UTF-8", "ISO-8859-1", true, false);var res = conv("\xE9t\xE9");QA.ASSERT(res.length, 3, "UC string length");}))(qaapi);
((function anonymous(QA) {var conv = new Iconv("UTF-16", "ISO-8859-1", false, false);var res = conv("abc");QA.ASSERT(res.length, 8, "non-UC string length");var conv = new Iconv("UTF-16", "ISO-8859-1", true, false);var res = conv("abc");QA.ASSERT(res.length, 4, "UC string length");}))(qaapi);
((function anonymous(QA) {var conv = new Iconv("UTF-8", "ISO-8859-1", true, false);var res = conv("\xE9");QA.ASSERT(res.length, 1, "UC string length");QA.ASSERT(String.charCodeAt(res[0]), 43459, "\"\xE9\" is (c3 a9)");var res = conv("\xE9\xE9\xE9\xE9");QA.ASSERT(res.length, 4, "UC string length");QA.ASSERT(String.charCodeAt(res[0]), 43459, "\"\xE9\" is (c3 a9)");QA.ASSERT(String.charCodeAt(res[1]), 43459, "\"\xE9\" is (c3 a9)");QA.ASSERT(String.charCodeAt(res[2]), 43459, "\"\xE9\" is (c3 a9)");QA.ASSERT(String.charCodeAt(res[3]), 43459, "\"\xE9\" is (c3 a9)");}))(qaapi);
((function anonymous(QA) {var conv = new Iconv(Iconv.jsUC, "ISO-8859-1", true, true);var res = conv("\xE9t\xE9");QA.ASSERT(res.length, 6, "string length");QA.ASSERT(String.charCodeAt(res[0]), 233, "the char");}))(qaapi);
((function anonymous(QA) {var list = Iconv.list;QA.ASSERT(list.indexOf("UTF-8"), 11, "has UTF-8");QA.ASSERT(list.indexOf("ISO-8859-1"), 48, "has ISO-8859-1");}))(qaapi);
((function anonymous(QA) {ui = new Iconv("UTF-8", "ISO-8859-1");iu = new Iconv("ISO-8859-1", "UTF-8");for (var cc = 0; cc < 256; ++cc) {var c0 = String.fromCharCode(cc);var c1 = iu(ui(c0));QA.ASSERT_STR(c0, c1, "char " + cc);}}))(qaapi);
((function anonymous(QA) {QA.ASSERT(scripthostpath.length > 0, true, "script host path");QA.ASSERT(scripthostname.substr(0, 6), "jshost", "script host name");QA.ASSERT_TYPE(_host, "object", "has _host object");QA.ASSERT_TYPE(global, "object", "has \"global\" property");var mod = LoadModule("jsstd");var mod1 = LoadModule("jsstd");QA.ASSERT(mod, mod1, "LoadModule");QA.ASSERT("unsafeMode" in _host, true, "unsafe mode is present");QA.ASSERT(global.arguments[0].substr(-5), "qa.js", "javascript program name");}))(qaapi);
((function anonymous(QA) {var process = new Process("jshost", ["-u", "-i", "_host.stderr(\"46t5be4qg6b5e46grb5we4g5rn4trnehirwerwer\")"]);var res = process.stderr.Read();QA.ASSERT_STR(res, "46t5be4qg6b5e46grb5we4g5rn4trnehirwerwer", "jshost arguments");}))(qaapi);
((function anonymous(QA) {var process = new Process("jshost", ["-u", "-i", "_host.stdout(arguments.toString())", "123", "-c"]);var res = process.stdout.Read();QA.ASSERT_STR(res, "_host.stdout(arguments.toString()),123,-c", "jshost arguments");}))(qaapi);
((function anonymous(QA) {for each (item in global) {var s = String(global[item]);}}))(qaapi);
((function anonymous(QA) {PropertiesList(global);}))(qaapi);
((function anonymous(QA) {var data = QA.RandomString(30000);var IV = QA.RandomString(100);var cr = new Cipher("CFB", "cast5", "my  key of  16B ", IV);var encryptedText = cr.Encrypt(data);var cr = new Cipher("CFB", "cast5", "my  key of  16B ", IV);QA.ASSERT_STR(cr.Decrypt(encryptedText), data, "crypy/decript with Cast5 cipher using CFB mode");}))(qaapi);
((function anonymous(QA) {
function count(o) {var n = 0;for (var p in o) {n += Object.prototype.hasOwnProperty.call(o, p);}return n;}

QA.ASSERT(count(Cipher.list), 21, "length of Cipher.list");QA.ASSERT(Cipher.list.toSource().length, 1609, "length of Cipher.list.toString");QA.ASSERT(count(Hash.list), 15, "length of Cipher.list");QA.ASSERT(Hash.list.toSource().length, 535, "length of Hash.list.toString");QA.ASSERT(count(Prng.list), 5, "length of Cipher.list");QA.ASSERT(Prng.list.toSource().length, 51, "length of Prng.list.toString");}))(qaapi);
((function anonymous(QA) {var b = new Blob("abc");QA.NO_CRASH(Stringify(b), "abc");var c = {};c._NI_BufferGet = b._NI_BufferGet;QA.NO_CRASH(Stringify(c));QA.NO_CRASH(Stringify({_NI_BufferGet: function () {}}));try {QA.NO_CRASH(Stringify({__proto__: b}));} catch (ex) {}}))(qaapi);
((function anonymous(QA) {var prev = _host.stderr;delete _host.stderr;try {eval("azer()");} catch (ex) {}_host.stderr = prev;}))(qaapi);
((function anonymous(QA) {var buffer = "";var prev = _host.stderr;_host.stderr = (function (chunk) buffer += chunk);try {eval("azer()");} catch (ex) {}_host.stderr = prev;QA.ASSERT_STR(buffer.length == 0, true, "stderr redirection result");}))(qaapi);
((function anonymous(QA) {
function noop() {}

var t = + new Date;for (var i = 0; i < 1000000; ++i) {}noop();t = + new Date - t;QA.ASSERT(t < 30, true, "run time");}))(qaapi);
((function anonymous(QA) {var id = LoadModule("jsstd");QA.ASSERT(LoadModule("jsstd"), id, "reloading the same module");QA.ASSERT(LoadModule("azyegyiazgiazygc"), false, "loading inexisting module");QA.ASSERT(LoadModule(undefined), false, "loading inexisting module");QA.ASSERT(LoadModule(0), false, "loading inexisting module");QA.ASSERT(LoadModule(0), false, "loading inexisting module");QA.ASSERT(LoadModule(""), false, "loading inexisting module");QA.ASSERT(LoadModule(NaN), false, "loading inexisting module");}))(qaapi);
((function anonymous(QA) {QA.GC();var s = StringRepeat("x", 100000);s = undefined;QA.GC();}))(qaapi);}

		var qaapi = ({__noSuchMethod__:(function () {}), RandomData:(function () "qa_tmp_123456789"), RandomString:(function () "qa_tmp_abcdefghij")});

		SetPerfTestMode();
		
		TimeCounter();
		var t = TimeCounter();
		var err = TimeCounter() - t;
	
		for ( var i = 0; i < 5; ++i )
			Tests(qaapi);
		
		CollectGarbage();
		disableGarbageCollection = true;

		Tests(qaapi);
		var t = TimeCounter();
		Tests(qaapi);
		t = TimeCounter() - t - err;

		var times = Math.floor( (parseInt(arguments[1])||1000) / t ); // 2s
		
		prev_stdout('loop: '+times+'x'+t.toFixed(4)+'ms\n');
		
		var bestTime = Infinity;
		for ( var i = 0; i < times; ++i ) {
		
			var t = TimeCounter();
			Tests(qaapi);
			t = TimeCounter() - t - err;
			if ( t < bestTime )
				bestTime = t;
		}
		
		_host.stdout = prev_stdout;
		_host.stderr = prev_stderr;
		Print(149+' tests in '+ bestTime.toFixed(4) +' ms\n');

	