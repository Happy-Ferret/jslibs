<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: GNU GPL 2.0
   - 
   - The contents of this file are subject to the
   - GNU General Public License Version 2.0; you may not use this file except
   - in compliance with the License. You may obtain a copy of the License at
   - http://www.gnu.org/licenses/gpl.html
   - 
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<window id="window"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:html="http://www.w3.org/1999/xhtml"
	onload="init(event)"
>
	<html:style id="css">
		<![CDATA[
		html {
			border-width: 0px;
			overflow: scroll;
		}
		
		html, body {
			margin: 0px;
			padding: 0px;
		}

		.hide {
			display: none;
		}
		
		.scope {
			white-space: pre;
			font-family: monospace;
		}
		
		.codeItem {
			width: 100%;
			border-collapse: collapse; 
			white-space: pre;
			font-family: monospace;
			background-color: #CCC;
			cursor: default;
			-moz-user-select: none;
		}

		.codeItem .filename {
			white-space: pre;
			font-family: monospace;
			font-weight: normal;
			background-color: #CCC;
			padding: 5px 0px;
		}

		.codeItem td {
			color: #888;
			padding: 0px 4px;
		}
		
		.codeItem tbody td+td {
			background-color: #DDD;
			color: black;
			-moz-user-select: text;
		}
		
		.codeItem thead .currentLine,
		.codeItem tbody .currentLine td+td {
			background-color: #EEA;
		}
		
		.codeItem thead .currentLineError,
		.codeItem tbody .currentLineError td+td {
			background-color: #EAA;
		}

		.codeItem thead .oldLine,
		.codeItem tbody .oldLine td+td {
			background-color: #AEA;
		}
		
		.codeInfo {
			display: none;
			position: absolute;
			z-index: 1;
			white-space: pre;
			font-family: monospace;
			font-size: smaller;
			padding: 3px 10px;
			border: 1px solid #AAA;
			background-color: #EEE;
			opacity: 0.95;
		}
				
		.codeItem tbody .selectedKwyword {
			background-color: white;
		}
		
		.watchItem {
			white-space: pre;
			font-family: monospace;
			border-bottom: 1px dotted #BBB;
			padding-bottom: 2px;
			margin-bottom: 2px;
			cursor: default;
		}

		.watchItem .result {
			margin-left: 20px;
		}

		.watchItem .code {
			background-color: #DDD;
		}
		
		.watchItem .error {
			color: red;
		}

		.codeItem tbody .breakpoint > :first-child {
			background-color: red;
			color: white;
		}

		.codeItem tbody .condition > :first-child {
			background-color: orange;
			color: white;
		}
		
		.stack {
			white-space: pre;
			font-family: monospace;
			cursor: default;
			-moz-user-select: none;
		}
		
		.currentStackFrame {
			font-weight: bold;
		}
		]]>
	</html:style>


	<script type="text/javascript">
		<![CDATA[
		
		function Trace() window.console.debug.apply(this, arguments);
		
		function $(id) document.getElementById(id);
		
		function TextToHTMLNode(doc, text) {
			
			var elt = doc.createElement('div');
			elt.innerHTML = text;
			return elt.firstChild;
		}
		
		function XPath(ref, xpath) {
			
			doc = ref.ownerDocument || ref;
			var result = doc.evaluate(xpath, ref, null, XPathResult.ANY_TYPE, null);
			switch (result.resultType) {

				case XPathResult.NUMBER_TYPE:
					return result.numberValue;
				case XPathResult.BOOLEAN_TYPE:
					return result.booleanValue;
				case XPathResult.STRING_TYPE:
					return result.stringValue;
			} // else XPathResult.UNORDERED_NODE_ITERATOR_TYPE
			var list = [];
			for ( var node = result.iterateNext(); node; node = result.iterateNext() )
				switch ( node.nodeType ) {
				case node.ATTRIBUTE_NODE:
					list.push( node.value );
					break;
				case node.TEXT_NODE:
					list.push( node.data );
					break;
				default:
					list.push( node );
				}
			return list;
		}

		function StringReplacer(conversionObject) function(s) s.replace(new RegExp([k.replace(/(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\)/g, "\\$1") for (k in conversionObject)].join('|'), 'g'), function(str) conversionObject[str]);

		var EscapeEntities = StringReplacer({'&':'&amp;', '<':'&lt;', '>':'&gt;'});
		
		function InsertNode(node, pos) pos.parentNode.insertBefore(node, pos);
		
		function InsertNodeAtBeginning(node, parent) parent.firstChild ? parent.insertBefore(node, parent.firstChild) : parent.appendChild(node);

		function ElementAbsolutePosition(elt) [(function(o) o.offsetLeft + (o.offsetParent ? arguments.callee(o.offsetParent) : 0))(elt), (function(o) o.offsetTop + (o.offsetParent ? arguments.callee(o.offsetParent) : 0))(elt)];
		
		function HasClass(elt, class) (' '+elt.className+' ').indexOf(' '+class+' ') != -1;

		function SetClass(polarity, elt, class) {
		
			class = ' '+class+' ';
			var str = ' '+elt.className+' ';
			var pos = str.lastIndexOf(class);
			if (polarity != (pos != -1))
				elt.className = polarity ? str+class : str.substr(0, pos+1)+str.substr(pos+class.length);
		}

		function SetInView(elt, offset) {

			var pos = ElementAbsolutePosition(elt)[1];
			var body = elt.ownerDocument.body;
			if ( pos < body.scrollTop || pos + elt.offsetHeight > body.scrollTop + body.clientHeight ) {
			
				elt.scrollIntoView();
				body.scrollTop += offset || 0;
			}
		}
      
      function SimpleRpc(ip, port) {
      
      	this.__noSuchMethod__ = function() {

				netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead"); // allow cross-domain xhr
				var xhr = new XMLHttpRequest();
				try {

					xhr.open('GET', 'http://'+ip+':'+port+'/?'+encodeURIComponent(uneval(Array.slice(arguments))), false);
					xhr.send(null);
					return eval('('+xhr.responseText+')');
				} catch(ex) {
					return new Error(ex);
				}
			}
		}      
      
		function Variable() {
			
			var value, listeners = [];
			this.Listen = function(fct) listeners.push(fct);
			this.__defineGetter__('value', function() value);
			this.__defineSetter__('value', function(val) { value = val; for each ( lis in listeners ) lis(value) });
		}
		
      
		////////////////////////////////////////////////////////////////
		
		var watchManager, stackManager, codeManager, breakpointManager;

		var currentStackFrameIndex = new Variable();
		var programStackFrameIndex = new Variable();

		var debuggerRpc = new SimpleRpc('127.0.0.1', 8009);

		var codeDoc, stackDoc, watchDoc;
		function init() {
			
			codeDoc = $('code').contentDocument;
			stackDoc = $('stack').contentDocument;
			watchDoc = $('watch').contentDocument;

			codeDoc.getElementsByTagName('HEAD')[0].appendChild(codeDoc.importNode($('css'), true)); // add CSS ...
			stackDoc.getElementsByTagName('HEAD')[0].appendChild(stackDoc.importNode($('css'), true));
			watchDoc.getElementsByTagName('HEAD')[0].appendChild(watchDoc.importNode($('css'), true));
			
			codeDoc.onclick = function() { focus() }; // restore focus for key management ...
			stackDoc.onclick = function() { focus() };
			watchDoc.onclick = function() { focus() };
			
			watchManager = new WatchManager();
			stackManager = new StackManager();
			codeManager = new CodeManager();
			breakpointManager = new BreakpointManager();

			ConnectRetry();
		}

		var retryCount = 0;
		function ConnectRetry() {

			retryCount++;
			if ( debuggerRpc.Ping() != true ) {
				
				setTimeout( arguments.callee, retryCount < 10 ? 0 : 1000 );
			} else {
				
				retryCount = 0;
				UpdateState();	
			}
		}
		
		
		function UpdateState() {
		
			$('statusInfo').label = 'querying state...';
			var s = debuggerRpc.State();
			
			if ( !(s instanceof Error) ) {

				$('statusInfo').label = 'break: '+s.breakOrigin + ( s.hasException ? ' ('+s.exception+')' : '' );
				programStackFrameIndex.value = s.stackFrameIndex;
			} else {

				$('statusInfo').label = 'disconnected';
				codeDoc.body.innerHTML = '';
				watchDoc.body.innerHTML = '';
				stackDoc.body.innerHTML = '';
				ConnectRetry();
			}
		}


		function StackManager() {
			
			var self = this;
			
			this.Update = function(stackFrameIndex) {

				stackDoc.body.innerHTML = '';
				var stack = debuggerRpc.GetStack();
				var list = stackDoc.body.appendChild(TextToHTMLNode(stackDoc, '<div class="stack"/>'));
				for ( var [i, l] in Iterator(stack) ) {

					var c = Math.floor(200 / stack.length * i);
					var item = TextToHTMLNode(stackDoc, '<div style="color:rgb('+c+','+c+','+c+')"><a>'+l.filename+':'+l.lineno+'</a> - '+l.contextName+'</div>');
					list.appendChild(item);
					if ( currentStackFrameIndex.value == stack.length-1-i )
						SetClass(true, item, 'currentStackFrame');
					item.onclick = let ( index = stack.length-1-i ) function() currentStackFrameIndex.value = index;
				}
			}
			
			currentStackFrameIndex.Listen(function(newVal) self.Update(newVal));
			programStackFrameIndex.Listen(function(newVal) currentStackFrameIndex.value = newVal);
		}


		function WatchManager() {
			
			var self = this;
			
			this.Update = function( stackFrameIndex ) {

				if ( watchDoc.body.firstChild )
					watchDoc.body.removeChild(watchDoc.body.firstChild);
				var watch = debuggerRpc.GetCookie('watch') || [];
				var list = watchDoc.body.appendChild(TextToHTMLNode(stackDoc, '<div class="watch"/>'));
				
				for each ( var code in watch ) {
					
					try {

						var res = debuggerRpc.Eval(code, stackFrameIndex);
					} catch (ex) {

						var res = String(ex);
					}
					var elt = InsertNodeAtBeginning(TextToHTMLNode(watchDoc,'<div class="watchItem"><div class="code">'+EscapeEntities(code)+'</div><div class="result" title="'+typeof(res)+'">'+EscapeEntities(String(res))+'</div></div>'), list);
					SetClass(res instanceof Error, elt.lastChild, 'error');
//					watchDoc.body.scrollTop = watchDoc.body.scrollHeight;			
				}
			}
			
			this.Add = function(code) {

				var watch = debuggerRpc.GetCookie('watch') || [];
				watch.unshift(code);
				debuggerRpc.SetCookie('watch',  watch);
				this.Update(currentStackFrameIndex.value);
			}
			
			currentStackFrameIndex.Listen(function(newVal) self.Update(newVal));
		}


		function CodeManager() {
		
			var self = this;
		
			var infoElt = codeDoc.body.appendChild(TextToHTMLNode(codeDoc, '<span class="codeInfo"/>'));

			var keywordInfoResetUi = [];
			
			codeDoc.addEventListener('mouseover', function(ev) {
				
				if ( ev.target.nodeName == 'A' ) {
					
					var info = debuggerRpc.Eval(ev.target.firstChild.data, currentStackFrameIndex.value);
					if ( info instanceof Error )
						return;
					var def = debuggerRpc.DefinitionLocation(ev.target.firstChild.data);
					infoElt.innerHTML = info + (def ? '<br/>(<b>'+def[0]+':'+def[1]+'</b>)' : '');
					
					infoElt.style.display = 'block';
					keywordInfoResetUi.push(function() infoElt.style.display = 'none');
					
					var kw = ev.target;
					SetClass(true, kw, 'selectedKwyword');
					keywordInfoResetUi.push(function() SetClass(false, kw, 'selectedKwyword'));

					var [x,y] = ElementAbsolutePosition(ev.target);
					infoElt.style.left = x+'px';
					var top = y - infoElt.offsetHeight < codeDoc.body.scrollTop ? y + ev.target.offsetHeight + 10 : y - infoElt.offsetHeight;

					infoElt.style.top = top+'px';
				}
			}, false);
			
			codeDoc.addEventListener('mouseout', function(ev) {

				while (keywordInfoResetUi.length)
					keywordInfoResetUi.shift()();
			}, false);
			

			this.GetCodeElt = function(filename) {

				var res = XPath(codeDoc, '//table[@class="codeItem"][thead/th[text()="'+filename+'"]]');
				if ( res.length )
					return res[0];
				var codeText = debuggerRpc.GetSource(filename);
				codeText = EscapeEntities(codeText);
				codeText = codeText.replace(/(&?)(\$?[\w]+)/g, function(s, p1, p2) s[0] == '&' ? s : '<a>'+s+'</a>'); // we must avoid to convert entities
				var codeLines = codeText.split(/\r?\n/);
				var htmlLines = [ '<tr><td>'+(line+1)+'</td><td>'+code+'</td></tr>' for each ( [line, code] in Iterator(codeLines) ) ];
				var codeElt = TextToHTMLNode(codeDoc, '<table class="codeItem"><colgroup><col width="0"><col width="*"></colgroup><thead><th class="filename" colspan="3">'+filename+'</th></thead><tbody>'+htmlLines.join('')+'</tbody></table>');
				codeDoc.body.appendChild(codeElt);
				breakpointManager.Update(filename);
				return codeElt;
			}


			var gotoResetUi = [];

			this.GotoFile = function(filename, lineno) {
			
				var codeElt = this.GetCodeElt(filename);
				SetInView(XPath(codeElt, 'thead/th')[0]);
			}
			
			this.Goto = function(filename, lineno, class) {

				while (gotoResetUi.length)
					gotoResetUi.shift()();

				var codeElt = this.GetCodeElt(filename);
				if ( lineno > 0 )
					var line = XPath(codeElt, 'tbody/tr['+(lineno)+']')[0];
				else
					var line = XPath(codeElt, 'thead/th')[0];

				SetClass(true, line, class);
				gotoResetUi.push(function() SetClass(false, line, class));
				SetInView(line, -20);
			}
			
			this.Update = function(stackFrameIndex) {

				if ( stackFrameIndex == undefined )
					stackFrameIndex = programStackFrameIndex.value;
				var isLastFrame = (stackFrameIndex == programStackFrameIndex.value);
				var state, filename, lineno, hasException;
				if (isLastFrame) {

					state = debuggerRpc.State();
					filename = state.filename;
					lineno = state.lineno;
					hasException = state.hasException;
				} else {
	
					stackFrame = debuggerRpc.GetStackFrame(stackFrameIndex);
					filename = stackFrame.filename;
					lineno = stackFrame.lineno;
					hasException = undefined;
				}

				self.Goto(filename, lineno, isLastFrame ? (hasException ? 'currentLineError' : 'currentLine' ) : 'oldLine');
			}
			
			currentStackFrameIndex.Listen(function(newVal) self.Update(newVal));
		}


		function BreakpointManager() {
			
			this.Update = function(filename) {
				
				var codeElt = codeManager.GetCodeElt(filename);
				for each ( var [lineno, condition] in debuggerRpc.BreakpointList(filename) ) {

					var elt = XPath(codeElt, 'tbody/tr['+(lineno)+']')[0];
					SetClass(true, elt, 'breakpoint');
					if ( condition ) {
					
						SetClass(true, elt, 'condition');
						elt.title = 'break when "'+condition+'" is true';
					}
				}
			}
			
			codeDoc.addEventListener('mousedown', function(ev) {
				
				var e = ev.target;
				if ( e.nodeName == 'TD' && e.previousSibling == null ) {
				
					var table = e.parentNode.parentNode.parentNode;
					var line = e.firstChild.data;
					var filename = XPath(table, 'thead/th[1]/text()')[0];
					
					var actualLineno = debuggerRpc.GetActualLineno(filename, line);
					
					if ( actualLineno == undefined )
						return;

					var elt = XPath(table, 'tbody/tr['+actualLineno+']')[0];
					
					var state = HasClass(elt, 'breakpoint');

					if ( state ) {
					
						debuggerRpc.RemoveBreakpoint(filename, actualLineno);
						SetClass(false, elt, 'condition');
						SetClass(false, elt, 'breakpoint');
					} else {
					
						debuggerRpc.AddBreakpoint(filename, actualLineno);
						SetClass(true, elt, 'breakpoint');
					}
					
					if ( !state && ev.shiftKey ) {

						var condition = debuggerRpc.GetBreakpointCondition(filename, line);
						condition = prompt('Breakpoint condition', condition);
						debuggerRpc.SetBreakpointCondition(filename, line, condition);
						elt.title = 'break when "'+condition+'" is true';
						SetClass(true, elt, 'condition');
					}
				}
			}, false);
		}

		]]>
	</script>

	<vbox flex="1">
		<commandset>
			<command id="cmd_step" oncommand="debuggerRpc.Action('step'); UpdateState()"/>
			<command id="cmd_stepover" oncommand="debuggerRpc.Action('stepover'); UpdateState()"/>
			<command id="cmd_stepthrough" oncommand="debuggerRpc.Action('stepthrough'); UpdateState()"/>
			<command id="cmd_stepout" oncommand="debuggerRpc.Action('stepout'); UpdateState()"/>
			<command id="cmd_continue" oncommand="debuggerRpc.Action('continue'); UpdateState()"/>
			
			<command id="cmd_frameup" oncommand="if (currentStackFrameIndex.value > 0) currentStackFrameIndex.value--"/>
			<command id="cmd_framedown" oncommand="if (programStackFrameIndex.value > currentStackFrameIndex.value) currentStackFrameIndex.value++"/>
		</commandset>
		<keyset>
		  <key keycode="VK_F8" command="cmd_continue" phase="capturing"/>
		  <key keycode="VK_F10" command="cmd_stepover" phase="capturing"/>
		  <key modifiers="shift" keycode="VK_F10" command="cmd_stepout" phase="capturing"/>
		  <key keycode="VK_F11" command="cmd_step" phase="capturing"/>
		  <key modifiers="shift" keycode="VK_F11" command="cmd_stepthrough" phase="capturing"/>

		  <key keycode="VK_DOWN" command="cmd_stepover" phase="capturing"/>
		  <key modifiers="control" keycode="VK_DOWN" command="cmd_stepthrough" phase="capturing"/>
		  <key keycode="VK_LEFT" command="cmd_stepout" phase="capturing"/>
		  <key modifiers="control" keycode="VK_LEFT" command="cmd_continue" phase="capturing"/>
		  <key keycode="VK_RIGHT" command="cmd_step" phase="capturing"/>
		  <key modifiers="shift" keycode="VK_UP" command="cmd_frameup" phase="capturing"/>
		  <key modifiers="shift" keycode="VK_DOWN" command="cmd_framedown" phase="capturing"/>
		</keyset>
		<hbox flex="1">
			<html:iframe id="code" flex="1" frameborder="0"/>
			<splitter><grippy/></splitter>
			<vbox>
				<html:iframe id="stack" flex="1" frameborder="0"/>
				<splitter><grippy/></splitter>
				<html:iframe id="watch" flex="1" frameborder="0"/>
				<splitter><grippy/></splitter>
				<textbox multiline="true" onkeydown="if (event.keyCode==13) { watchManager.Add(this.value); this.value=''; event.preventDefault() }"/>
			</vbox>
		</hbox>
		<toolbox>
			<toolbar id="nav-toolbar">
				<toolbarbutton label="Step" tooltiptext="F11" command="cmd_step"/>
				<toolbarbutton label="over" tooltiptext="F10" command="cmd_stepover"/>
				<toolbarbutton label="out" tooltiptext="Shift-F10" command="cmd_stepout"/>
				<toolbarbutton label="through" tooltiptext="Shift-F11" command="cmd_stepthrough"/>
				<toolbarbutton label="Continue" tooltiptext="F8" command="cmd_continue"/>
				<toolbarseparator/>
				<menu label="scripts" onpopupshowing="for each ( var item in debuggerRpc.GetScriptList() ) this.appendItem(item)" onpopuphidden="while(this.removeItemAt(0));" oncommand="codeManager.GotoFile(event.target.label)">
					<menupopup/>
				</menu>
			</toolbar>
		</toolbox>
		<statusbar>
			<statusbarpanel id="statusInfo" flex="1"/>
		</statusbar>
	</vbox>
</window>
