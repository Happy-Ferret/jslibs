<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<window id="window"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:html="http://www.w3.org/1999/xhtml"
	onload="init(event)"
>
	<html:style id="css">
		<![CDATA[
		html, body {
			margin: 0px;
			padding: 0px;
		}
		 
		html {
			border-width:0px; overflow: scroll;
		}

		ol {
			margin: 0px;
			background-color: #CCC;
		}
		li {
			white-space: pre;
			font-family: monospace;
			background-color: #DDD;
		}
		.filename {
			white-space: pre;
			font-family: monospace;
			background-color: #EEE;
		}
		.currentLine {
			background-color: #EEA;
		}
		.hide {
			display: none;
		}
		
		.scope {
			white-space: pre;
			font-family: monospace;
		}
		
		]]>
	</html:style>


	<script type="text/javascript">
		<![CDATA[
		
		function Trace() window.console.debug.apply(this, arguments);
		
		function $(id) document.getElementById(id);
		
		var domParser = new DOMParser();
		
		function TextToHTMLNode(doc, text) {
			
			elt = domParser.parseFromString('<div xmlns="http://www.w3.org/1999/xhtml">'+text+'</div>', 'application/xhtml+xml').documentElement;

			if ( elt.nodeName != 'parsererror' )
				return doc.importNode(elt, true).firstChild;
			else {
				
				Trace(elt.firstChild.data);
				Trace(text);
			}
		}
		
		function XPath(xpath) {

			return document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
		}
		 
		function init() {
		
			var doc = $('code').contentDocument;
			doc.getElementsByTagName('HEAD')[0].appendChild(doc.importNode($('css'), true));
			var doc = $('eval').contentDocument;
			doc.getElementsByTagName('HEAD')[0].appendChild(doc.importNode($('css'), true));
			ConnectRetry();
			InitMouseOverCode();
		}
		 

		function QueryDebugger() {
		
			netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead"); // allow cross-domain xhr
			var xhr = new XMLHttpRequest();
			try {
			
				xhr.open('GET', 'http://127.0.0.1:8009/?'+encodeURIComponent(Array.slice(arguments).toSource()), false);
				xhr.send(null);
				return eval(xhr.responseText);
			} catch(ex) {}
		}
		
		function ConnectRetry() {

			if ( QueryDebugger() == undefined )
				setTimeout( arguments.callee, 100 );
			else
				UpdateState();	
		}
		
		function DetectIdentifiers(code) {
			
			return code.replace(/(&?)([\w]+)/g, function(s, p1, p2) {
				return s[0] == '&' ? s : '<i>'+s+'</i>'; // we must avoid to convert entities
			});
		}
		
		function StringReplacer(conversionObject) function(s) s.replace(new RegExp([k.replace(/(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\)/g, "\\$1") for (k in conversionObject)].join('|'), 'g'), function(str) conversionObject[str]);

		EscapeEntities = StringReplacer({'&':'&amp;', '<':'&lt;', '>':'&gt;'});
		
		function InsertNode(node, pos) pos.parentNode.insertBefore(node, pos);
		function InsertNodeAtBeginning(node, parent) parent.firstChild ? parent.insertBefore(node, parent.firstChild) : parent.appendChild(node);

		function IsInView(elt) {
		
//			for ( var pos = 0, e = elt; e; pos += e.offsetTop, e = e.offsetParent );

	var e = elt, pos = 0;
	do {
		pos += e.offsetTop;
	} while (e = e.offsetParent);


			var doc = elt.ownerDocument.documentElement;
			
			Trace( doc, pos, doc.scrollHeight, doc.scrollHeight + elt.ownerDocument.body.clientHeight );
			return pos >= doc.scrollHeight && pos <= doc.scrollHeight + elt.ownerDocument.body.clientHeight;
		}
		
		var resetUi = [];
		
		function UpdateState() {
		
			while (resetUi.length)
				resetUi.shift()();

			var codeDoc = $('code').contentDocument;

			$('statusInfo').label = 'querying state...';
			var state = QueryDebugger('state');
			
			if ( !state ) {
			
				$('statusInfo').label = '...';
				codeDoc.body.innerHTML = '';
				ConnectRetry();
				return;
			}
			
			$('statusInfo').label = 'break: '+state.breakOrigin + ( state.hasException ? ' ('+state.exception+')' : '' );

			var codeElt;
			for each ( [i, elt] in Iterator(codeDoc.body.childNodes) ) {
				if (elt && elt.firstChild.firstChild.data == state.filename) // why elt sometimes is undefined ???
					codeElt = elt;
			}
			
			if ( !codeElt ) {
				
				var codeText = EscapeEntities(QueryDebugger('getSource', state.filename));
				var codeLines = DetectIdentifiers(codeText).split('\n');
				var codeList = TextToHTMLNode(codeDoc, '<ol id="code"><li>'+codeLines.join('</li><li>')+'</li></ol>');
				var codeElt = codeDoc.body.appendChild(TextToHTMLNode(codeDoc,'<div><div class="filename">'+state.filename+'</div></div>'));
				codeElt.appendChild(codeList);
			}
			
			codeElt.className = '';
			
			var currentLineElt = codeElt.childNodes[1].childNodes[state.line-1];
			currentLineElt.className = 'currentLine';
			resetUi.push(function() currentLineElt.className = '');
			
			if ( !IsInView(currentLineElt) ) {

				var i = 4, pos = currentLineElt;
				while ( pos && i ) {

					pos = pos.previousSibling;
					i--;
				}
				pos.scrollIntoView();
			}
			
			resetUi.push(function() codeElt.className = 'hide');
		}
		
		function DoEval(textBox) {
			
			var evalDoc = $('eval').contentDocument;
			var res = QueryDebugger('eval', textBox.value);
			evalDoc.body.appendChild(TextToHTMLNode(evalDoc,'<div>'+res+'</div>'));
			
			var htmlElt = evalDoc.documentElement;
			htmlElt.scrollTop = htmlElt.scrollHeight;

			textBox.value='';
		}
		 
		function InitMouseOverCode() {
			
			var codeDoc = $('code').contentDocument;
			codeDoc.addEventListener('mouseover', function(ev) {
				
				if ( ev.target.nodeName == 'i' )
					ev.target.title = QueryDebugger('eval', ev.target.firstChild.data);
			}, false);
		}

		]]>
	</script>

	<vbox flex="1">

		<toolbox>
			<toolbar id="nav-toolbar">
				<toolbarbutton label="Step" oncommand="QueryDebugger('action','step'); UpdateState()"/>
				<toolbarbutton label="Step over" oncommand="QueryDebugger('action','stepover'); UpdateState()"/>
				<toolbarbutton label="Step out" oncommand="QueryDebugger('action','stepout'); UpdateState()"/>
				<toolbarbutton label="Continue" oncommand="QueryDebugger('action','continue'); UpdateState()"/>
			</toolbar>
		</toolbox>

		<hbox flex="1">
			<html:iframe id="code" flex="1"/>
			<splitter collapse="before" resizeafter="farthest"><grippy/></splitter>
			<vbox>
				<html:iframe id="eval" flex="1"/>
				<splitter collapse="before" resizeafter="farthest"><grippy/></splitter>
				<textbox multiline="true" onkeydown="if (event.keyCode==13) DoEval(this), event.preventDefault()"/>
			</vbox>
		</hbox>

		<statusbar>
			<statusbarpanel id="statusInfo" flex="1"/>
		</statusbar>

	</vbox>
</window>
