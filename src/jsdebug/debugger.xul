<?xml version="1.0"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */
-->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<window id="window"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:html="http://www.w3.org/1999/xhtml"
	onload="init(event)"
>
	<html:style id="css">
		<![CDATA[
		html {
			border-width: 0px;
			overflow: scroll;
		}
		html, body {
			margin: 0px;
			padding: 0px;
		}

		.hide {
			display: none;
		}
		
		.scope {
			white-space: pre;
			font-family: monospace;
		}
		
		.codeInfo {
			display: none;
			position: absolute;
			z-index: 1;
			white-space: pre;
			font-family: monospace;
/*			font-size: smaller;*/
			padding: 3px 10px;
			border: 1px solid #AAA;
			background-color: #EEE;
			opacity: 0.95;
		}
		
		
		.codeItem {
			width: 100%;
			border-collapse: collapse; 
			white-space: pre;
			font-family: monospace;
			background-color: #CCC;
			cursor: default;
			-moz-user-select: none;
		}

		.codeItem .filename {
			white-space: pre;
			font-family: monospace;
			background-color: #CCC;
			padding-bottom: 10px;
		}

		.codeItem td {
			padding: 0px;		
		}
		
		.codeItem tbody td+td {
			cursor: text;
			background-color: #DDD;
			-moz-user-select: text;
		}
		
		.codeItem tbody .currentLine td+td {
			background-color: #EEA;
		}
		
		.evalItem {
			white-space: pre;
			font-family: monospace;
			border-bottom: 1px dotted #BBB;
			padding-bottom: 2px;
			margin-bottom: 2px;
		}
		
		.breakpoint {
			background-color: red !important;
			border-corner: 4px;
			color: white;
		}
		]]>
	</html:style>


	<script type="text/javascript">
		<![CDATA[
		
		function Trace() window.console.debug.apply(this, arguments);
		
		function $(id) document.getElementById(id);
		
		function TextToHTMLNode(doc, text) {
			
			var elt = doc.createElement('div');
			elt.innerHTML = text;
			return elt.firstChild;
		}
		
		function XPath(ref, xpath) {
			
			doc = ref.ownerDocument || ref;
			try {
				var result = doc.evaluate(xpath, ref, null, XPathResult.ANY_TYPE, null);
			} catch(ex) {
				return;
			}
			switch (result.resultType) {

				case XPathResult.NUMBER_TYPE:
					return result.numberValue;
				case XPathResult.BOOLEAN_TYPE:
					return result.booleanValue;
				case XPathResult.STRING_TYPE:
					return result.stringValue;
			} // else XPathResult.UNORDERED_NODE_ITERATOR_TYPE
			var list = [];
			for ( var node = result.iterateNext(); node; node = result.iterateNext() )
				list.push( node.constructor == Attr ? node.value : node);
			return list;
		}

		function StringReplacer(conversionObject) function(s) s.replace(new RegExp([k.replace(/(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\)/g, "\\$1") for (k in conversionObject)].join('|'), 'g'), function(str) conversionObject[str]);

		var EscapeEntities = StringReplacer({'&':'&amp;', '<':'&lt;', '>':'&gt;'});
		
		function InsertNode(node, pos) pos.parentNode.insertBefore(node, pos);
		function InsertNodeAtBeginning(node, parent) parent.firstChild ? parent.insertBefore(node, parent.firstChild) : parent.appendChild(node);

		function ElementAbsolutePosition(elt) [(function(o) o.offsetLeft + (o.offsetParent ? arguments.callee(o.offsetParent) : 0))(elt), (function(o) o.offsetTop + (o.offsetParent ? arguments.callee(o.offsetParent) : 0))(elt)];

		////////////////////////////////////////////////////////////////

		function init() {
		
			var doc = $('code').contentDocument;
			doc.getElementsByTagName('HEAD')[0].appendChild(doc.importNode($('css'), true));
			
			var doc = $('eval').contentDocument;
			doc.getElementsByTagName('HEAD')[0].appendChild(doc.importNode($('css'), true));
			
			ConnectRetry();
			InitMouseOverCode();
			InitBreakpointManager();
		}
		 

		function QueryDebugger() {
		
			netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead"); // allow cross-domain xhr
			var res, xhr = new XMLHttpRequest();
			try {
			
				xhr.open('GET', 'http://127.0.0.1:8009/?'+encodeURIComponent(Array.slice(arguments).toSource()), false);
				xhr.send(null);
				res = xhr.responseText;
			} catch(ex) {}
			try {
				return eval('('+res+')');
			} catch(ex) {}
		}
		
		function ConnectRetry() {

			if ( QueryDebugger() == undefined )
				setTimeout( arguments.callee, 100 );
			else
				UpdateState();	
		}
		
		function DetectIdentifiers(code) {
			
			return code.replace(/(&?)(\$?[\w]+)/g, function(s, p1, p2) {
				return s[0] == '&' ? s : '<b>'+s+'</b>'; // we must avoid to convert entities
			});
		}

		function SetInView(elt, offset) {

			var pos = ElementAbsolutePosition(elt)[1];
			var body = elt.ownerDocument.body;
			if ( pos < body.scrollTop || pos > body.scrollTop + body.clientHeight ) {
			
				elt.scrollIntoView();
				body.scrollTop += offset;
			}
		}

		
		var resetUi = [];
		
		function UpdateState() {
		
			while (resetUi.length)
				resetUi.shift()();

			var codeDoc = $('code').contentDocument;

			$('statusInfo').label = 'querying state...';
			var state = QueryDebugger('state');
			
			if ( !state ) {
			
				$('statusInfo').label = 'idle';
				codeDoc.body.innerHTML = '';
				ConnectRetry();
				return;
			}
			
			$('statusInfo').label = 'break: '+state.breakOrigin + ( state.hasException ? ' ('+state.exception+')' : '' );

			var res = XPath(codeDoc, '//table[@class="codeItem"][thead/th[text()="'+state.filename+'"]]');
		
			if ( res.length ) {
				
				codeElt = res[0];
			} else {
			
				var codeText = EscapeEntities(QueryDebugger('getSource', state.filename));
				var codeLines = DetectIdentifiers(codeText).split(/\r?\n/);
				var htmlLines = [ '<tr><td>'+(line+1)+'</td><td>'+code+'</td></tr>' for each ( [line,code] in Iterator(codeLines) ) ];
				var codeElt = TextToHTMLNode(codeDoc, '<table class="codeItem"><thead><th class="filename" colspan="3">'+state.filename+'</th></thead><tbody>'+htmlLines.join('')+'</tbody></table>')
				codeDoc.body.appendChild(codeElt);
			}


//			codeElt.className = '';

			var currentLineElt = XPath(codeElt, 'tbody/tr['+(state.line)+']')[0];
			
			currentLineElt.className = 'currentLine';
			resetUi.push(function() currentLineElt.className = '');
			SetInView(currentLineElt, -20);
//			resetUi.push(function() codeElt.className = 'hide');
		}
		
		function DoEval(textBox) {
			
			var evalDoc = $('eval').contentDocument;
			var res = QueryDebugger('eval', textBox.value);
			evalDoc.body.appendChild(TextToHTMLNode(evalDoc,'<div class="evalItem" '+(res instanceof Error ? 'style="color:red"' : '')+'>'+res+'</div>'));
			evalDoc.body.scrollTop = evalDoc.body.scrollHeight;
			textBox.value='';
		}

		function InitBreakpointManager() {
		
			var codeDoc = $('code').contentDocument;
			
			codeDoc.addEventListener('mousedown', function(ev) {
				
				var e = ev.target;
				if ( e.nodeName == 'TD' && e.previousSibling == null ) {
					
					var table = e.parentNode.parentNode.parentNode;
					var line = e.firstChild.data;
					var filename = table.firstChild.firstChild.firstChild.data;
					
					var state = e.className == 'breakpoint';
					var effectiveLine = QueryDebugger('breakpoint', !state, filename, line);
					
					var elt = XPath(table, 'tbody/tr['+effectiveLine+']/td[1]')[0];
					
					elt.className = state ? '' : 'breakpoint';
				}
			}, false);
		}

		 
		function InitMouseOverCode() {
			
			var codeDoc = $('code').contentDocument;
			var infoElt = codeDoc.body.appendChild(TextToHTMLNode(codeDoc, '<span class="codeInfo"/>'));
			
			codeDoc.addEventListener('mouseover', function(ev) {
				
				if ( ev.target.nodeName == 'B' ) {
					
					var info = QueryDebugger('eval', ev.target.firstChild.data);
					if ( info instanceof Error )
						return;
					infoElt.innerHTML = info
					infoElt.style.display = 'block';
					var [x,y] = ElementAbsolutePosition(ev.target);
					infoElt.style.left = x+'px';
					infoElt.style.top = y+ev.target.offsetHeight+'px';
				}
			}, false);
			
			codeDoc.addEventListener('mouseout', function(ev) {
				
				infoElt.style.display = 'none';
			}, false);		
		}

		]]>
	</script>

	<vbox flex="1">

		<commandset>
			<command id="cmd_step" oncommand="QueryDebugger('action','step'); UpdateState()"/>
			<command id="cmd_stepover" oncommand="QueryDebugger('action','stepover'); UpdateState()"/>
			<command id="cmd_stepout" oncommand="QueryDebugger('action','stepout'); UpdateState()"/>
			<command id="cmd_continue" oncommand="QueryDebugger('action','continue'); UpdateState()"/>
		</commandset>
		
		<keyset>
		  <key keycode="VK_F8" command="cmd_continue"/>
		  <key keycode="VK_F10" command="cmd_stepover"/>
		  <key modifiers="shift" keycode="VK_F10" command="cmd_stepout"/>
		  <key keycode="VK_F11" command="cmd_step"/>
		</keyset>

		<hbox flex="1">
			<html:iframe id="code" flex="1"/>
			<splitter collapse="before" resizeafter="farthest"><grippy/></splitter>
			<vbox>
				<html:iframe id="eval" flex="1"/>
				<splitter collapse="before" resizeafter="farthest"><grippy/></splitter>
				<textbox multiline="true" onkeydown="if (event.keyCode==13) DoEval(this), event.preventDefault()"/>
			</vbox>
		</hbox>

		<toolbox>
			<toolbar id="nav-toolbar">
				<toolbarbutton label="Step" tooltiptext="F11" command="cmd_step"/>
				<toolbarbutton label="over" tooltiptext="F10" command="cmd_stepover"/>
				<toolbarbutton label="out" tooltiptext="Shift-F10" command="cmd_stepout"/>
				<toolbarbutton label="Continue" tooltiptext="F8" command="cmd_continue"/>
			</toolbar>
		</toolbox>
		
		<statusbar>
			<statusbarpanel id="statusInfo" flex="1"/>
		</statusbar>

	</vbox>
</window>
