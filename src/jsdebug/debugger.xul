<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: GNU GPL 2.0
   - 
   - The contents of this file are subject to the
   - GNU General Public License Version 2.0; you may not use this file except
   - in compliance with the License. You may obtain a copy of the License at
   - http://www.gnu.org/licenses/gpl.html
   - 
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="data:text/css,

	#code :-moz-tree-row(selected) { background-color: transparent }
	#code :-moz-tree-cell-text(selected) { color: inherit }
	#code :-moz-tree-cell-text(line) { color: white; }
	#code :-moz-tree-cell-text(code) { font-family: monospace }

	#code :-moz-tree-column(line),
	#code :-moz-tree-column(sl),
	#code :-moz-tree-column(bp) { background-color: silver }
	
	#code :-moz-tree-cell(prevLine) { background-color: #EFE }
	
	#stack listitem[selected].selectedPrevLine,
	#code :-moz-tree-cell(selectedPrevLine) { background-color: #AFA }
	
	#stack listitem[selected].currentLine,
	#code :-moz-tree-cell(currentLine) { background-color: #FFA }
	#code :-moz-tree-cell(exception) { background-color: #FAA }

	#code :-moz-tree-cell(breakpoint) { background-color: red }
	#code :-moz-tree-cell(condBreakpoint) { background-color: orange }
	#code :-moz-tree-cell-text(breakpoint), #code :-moz-tree-cell(condBreakpoint) { color: white }

" type="text/css"?>

<window id="window"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:html="http://www.w3.org/1999/xhtml"
	onload="init(event)"
>
	<script type="text/javascript"><![CDATA[
		
		function Trace() window.console.debug.apply(this, arguments);
		
		function Stack() { try { throw Error() } catch (ex) { return 'stack:\n'+String(ex.stack).split('\n').slice(2).join('\n') }}        		
		
		function $(id) document.getElementById(id);
		
		function QueryPrivilege() {

			netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect UniversalBrowserRead UniversalBrowserWrite');
			netscape.security.PrivilegeManager.revertPrivilege('UniversalXPConnect UniversalBrowserRead UniversalBrowserWrite');
		}
		
		function CallWithPrivilege( privilege, fct ) {
			
			netscape.security.PrivilegeManager.enablePrivilege(privilege);
			var ret = fct();
			netscape.security.PrivilegeManager.revertPrivilege(privilege);
			return ret;
		}
		
		function AddProp(props, prop) {

			netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
			var aserv = Components.classes["@mozilla.org/atom-service;1"].getService(Components.interfaces.nsIAtomService);
			props.AppendElement(aserv.getAtom(prop));
			netscape.security.PrivilegeManager.revertPrivilege('UniversalXPConnect');
		}
		
		DefaultTreeView = {
			QueryInterface: function QueryInterface(aIID) {
				with (Components.interfaces)
					if ( nsITreeView.equals(aIID) || nsIClassInfo.equals(aIID) || nsISupportsWeakReference.equals(aIID) || nsISupports.equals(aIID))
						return this;
				throw 0x80004002; // Components.results.NS_NOINTERFACE;
			},
			getInterfaces: function getInterfaces(count) {
				count.value = 4;
				with (Components.interfaces) 
					return [ nsITreeView, nsIClassInfo, nsISupportsWeakReference, nsISupports];
			},
			getHelperForLanguage: function getHelperForLanguage(language) null,
			get contractID() null,
			get classDescription() 'myDefaultTreeView',
			get classID() null,
			get implementationLanguage() Components.interfaces.nsIProgrammimgLanguage.JAVASCRIPT,
			get flags() Components.interfaces.nsIClassInfo.MAIN_THREAD_ONLY | Components.interfaces.nsIClassInfo.DOM_OBJECT,
			setTree: function(treebox) { this.treebox = treebox; },
			cycleHeader: function(col) {},
			isSeparator: function(row) false,
			isSorted: function() false,
			getImageSrc: function(row,col) null,
			getRowProperties: function(row,props) {},
			getCellProperties: function(row,col,props) {},
			getColumnProperties: function(colid,col,props) {},
		
			getParentIndex: function(row) -1,
			hasNextSibling: function(row) false,
			RowHasChild: function(row) false,
			get rowCount() 0,
			getCellText: function(row, column) '',
			isContainer: function(row) false,
			isContainerEmpty: function(row) true,
			isContainerOpen: function(row) false,
			toggleOpenState: function(row) {},
			getLevel: function(row) 0,
		};
		
		function TreeView( dataProvider ) {
		
			this.dataProvider = dataProvider;
			this.view = [];
		}

		TreeView.prototype = {
			__proto__: DefaultTreeView,

			RowHasChild: function(row) {
			
				if ( row < this.view.length-1 )
					return this.view[row].every(function(elt, i) this.view[row+1][i] == elt, this);
			},
		
			get rowCount() this.view.length,
			getCellText : function(row, column) this.dataProvider(this.view[row], column.id),
			isContainer: function(row) this.dataProvider(this.view[row], 'hasChild'),
			isContainerEmpty: function(row) false,
			isContainerOpen: function(row) this.RowHasChild(row),
			getLevel: function(row) this.view[row].length-1,
			
			toggleOpenState: function(row) {
				
				var count = 0;
				if ( this.RowHasChild(row) ) {
						
					while ( this.RowHasChild(row) ) {
						
						count--;
						this.view.splice(row+1, 1);
					}
				} else {
					
					for each ( var p in this.dataProvider(this.view[row], 'childList') ) {
					
						count++;
						this.view.splice(row+count, 0, this.view[row].concat(p));
					}
				}
				this.treebox.rowCountChanged(row+1, count);
			},
		
			Add: function(name, val) {
				
				this.view.push([name]);
				this.treebox.rowCountChanged(this.view.length-1, 1); // http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeBoxObject.html
				this.treebox.ensureRowIsVisible(this.view.length-1);
			},

			RemoveByIndex: function(index) {
				
				this.view.splice(index, 1);
				this.treebox.rowCountChanged(index, -1);
			},
			
			RemoveAll: function() {
				
				this.treebox.rowCountChanged(0, -this.view.length);
				this.view.splice(0, this.view.length);
			},
			
			Invalidate: function() {
				
				var tv = this.treebox;
				setTimeout(function() tv.invalidate(), 50);
			}
		}

   
      function SimpleRpc(ip, port) {
      
      	this.__noSuchMethod__ = function() {

				netscape.security.PrivilegeManager.enablePrivilege('UniversalBrowserRead'); // allow cross-domain xhr
				var xhr = new XMLHttpRequest();
				try {

					xhr.open('POST', 'http://'+ip+':'+port+'/', false);
					xhr.send(uneval(Array.slice(arguments)));
					return eval('('+xhr.responseText+')');
				} catch(ex) {
				
					return new Error(ex);
				} finally {
				
					netscape.security.PrivilegeManager.revertPrivilege('UniversalBrowserRead');
				}
			}
		}      
      

		function Variable() {
			
			this._value = undefined;
			this._listeners = [];
		}

      Variable.prototype = {
      	get value() this._value,
      	set value(val) { var prevVal = this._value; this._value = val; this._FireListeners(this._listeners, val, prevVal) },
      	Listen: function(fct) this._listeners.push(fct),
      	__proto__:{_FireListeners: function(listeners, newVal, prevVal) { for each (lis in listeners) lis(newVal, prevVal) }}
      }
      
		Variable.Atomic = function() {
			
			var defered = [];
			Variable.prototype._FireListeners = function() defered.push(arguments);
			delete Variable.prototype._FireListeners;
			while ( defered.length ) Variable.prototype._FireListeners.apply(this, defered.shift());
		}
		
      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		var watchManager, stackManager, codeManager, breakpointManager;

		var programState = new Variable();
		var programStack = new Variable();
		var selectedStackFrame = new Variable();
		var currentFile = new Variable();
				
		var debuggerRpc = new SimpleRpc('127.0.0.1', 8009);

		function init() {

			QueryPrivilege();
			watchManager = new WatchManager();
			stackManager = new StackManager();
			codeManager = new CodeManager();
			ConnectRetry();
		}

		function ConnectRetry() {

			if ( debuggerRpc.Ping() != true )
				setTimeout(arguments.callee, 0);
			else
				UpdateState();	
		}
		
		function UpdateState() {
		
			$('statusInfo').label = 'querying state...';
			var s = debuggerRpc.State();
			
			if ( s instanceof Error ) {

				$('statusInfo').label = 'disconnected';
				ConnectRetry();
			} else {

				$('statusInfo').label = 'break: '+s.breakOrigin + ( s.hasException ? ' ('+s.exception+')' : '' );
				Variable.Atomic(
					programState.value = s,
					programStack.value = debuggerRpc.GetStack(),
					selectedStackFrame.value = programStack.value[s.stackFrameIndex]
				);
			}
		}


		function StackManager() {
			
			var self = this;
			var stack = $('stack');
			
			this.UpdateSelection = function(stackFrame) {
				
				stack.setAttribute('suppressonselect', true);
				stack.selectedIndex = stack.itemCount - 1 - stackFrame.index;
				stack.removeAttribute('suppressonselect');
			}
						
			this.UpdateContent = function() {

				stack.setAttribute('suppressonselect', true);
				stack.selectedIndex = -1;
				stack.removeAttribute('suppressonselect');
				while ( stack.removeItemAt(0) );
				for ( var [i, l] in Iterator(programStack.value) ) {

					var e = stack.insertItemAt(0, l.filename+':'+l.lineno+' - '+l.contextInfo, i);
					e.style.color = let ( c = Math.floor( (1 - i / programStack.value.length) * 160) ) 'rgb('+c+','+c+','+c+')';
					e.className = i == programStack.value.length-1 ? 'currentLine' : 'selectedPrevLine';
				}
			}
			
			this.Select = function( index ) {
				
				selectedStackFrame.value = programStack.value[index];
			}
			
			selectedStackFrame.Listen(function(newVal) self.UpdateSelection(newVal));
			programStack.Listen(function(newVal) self.UpdateContent(newVal));
		}


		function WatchManager() {
			
			var self = this;
			var watch = $('watch');
			var cache = {};
			var treeView = new TreeView(function(path, type) {
				
				id = path.join('.');
				var expInfo = id in cache ? cache[id] : (cache[id] = debuggerRpc.ExpressionInfo(path, selectedStackFrame.value.index));
				
				switch (type) {
					case 'hasChild':
						return expInfo.childList.length;
					case 'childList':
						return expInfo.childList;
					case 'expression':
						return path[path.length-1];
					case 'value':
						return expInfo.string;
					case 'source':
						return expInfo.source;
				}
			});
			
			CallWithPrivilege('UniversalBrowserWrite', function() { watch.view = treeView });
			
			this.Update = function( stackFrameIndex ) {
				
				cache = {};
				treeView.Invalidate();
			}
			
			this.Add = function(expression) {
				
				treeView.Add(expression);
			}

			this.RemoveIndex = function(index) {
				
				treeView.RemoveByIndex(index);
			}
			
			this.RemoveAll = function() {
				
				treeView.RemoveAll();
			}

			selectedStackFrame.Listen(function(newVal) self.Update(newVal));
		}


		
		function CodeManager() {
			
			var self = this;
			var code = $('code');

			var reset = [];
			
			var sourceFiles = {};
			var breakpointList = {};
			
			var cache_prevStackLines = {};
			
			var listView = {
				__proto__: DefaultTreeView,
				getCellText: function(row, col) {
					
					var lineno = row+1;
					switch ( col.id ) {
						case 'line':
							return lineno;
						case 'bp':
							return breakpointList[lineno];
						case 'sl':
							return cache_prevStackLines[lineno];
						case 'code':
							return sourceFiles[currentFile.value].code[row];
					}
				},
				getCellProperties: function(row, col, props) {
					
					var lineno = row+1;
					switch ( col.id ) {
						case 'line':
						case 'bp':
						
							if ( lineno in breakpointList )
								AddProp(props, breakpointList[lineno] == 'true' ? 'breakpoint' : 'condBreakpoint');
							break;
						case 'code':
						
							if ( lineno == programState.value.lineno && selectedStackFrame.value.index == programState.value.stackFrameIndex && currentFile.value == programState.value.filename ) {
								
								AddProp(props, 'currentLine');
								if ( programState.value.hasException )
									AddProp(props, 'exception');
								break;
							}
							
							if ( lineno in cache_prevStackLines )
								AddProp(props, 'prevLine');

							if ( lineno == selectedStackFrame.value.lineno && selectedStackFrame.value.filename == currentFile.value )
								AddProp(props, 'selectedPrevLine');
							break;
					}
				}
			}
			
						
			CallWithPrivilege('UniversalBrowserWrite', function() { code.view = listView });
			
		
			var row={}, col={}, childElt={}, x={}, y={}, width={}, height={};

/*
			code.addEventListener('mousemove', function(ev) {
				
				code.treeBoxObject.getCellAt(ev.clientX, ev.clientY, row, col, childElt);
				if ( row.value == -1 || col.value == null || col.value.id != 'code' || childElt.value != 'text' )
					return;
				var text = sourceFiles[currentFile.value].code[row.value];
				code.treeBoxObject.getCoordsForCellItem( row, col.value, 'text', x, y, width, height );
				var pos = ev.clientX - code.boxObject.x - x.value;
				Trace( text[Math.floor(pos/7)], width.value )
			}, false);
*/
			
			code.addEventListener('click', function(ev) {
				
				code.treeBoxObject.getCellAt(ev.clientX, ev.clientY, row, col, childElt);
				if ( row.value == -1 || col.value == null || col.value.id != 'line' && col.value.id != 'bp' )
					return;
				lineno = row.value+1; // lineno = debuggerRpc.GetActualLineno(currentFile.value, lineno);

				if ( ev.button == 2 ) {
					
					var condition = prompt('Breakpoint condition', breakpointList[lineno] || 'true');
					if ( condition && debuggerRpc.AddBreakpoint(currentFile.value, lineno, condition) )
						breakpointList[lineno] = condition;
				} else {

					if ( lineno in breakpointList ) {

						if ( debuggerRpc.RemoveBreakpoint(currentFile.value, lineno) )
							delete breakpointList[lineno];
					} else {

						if ( debuggerRpc.AddBreakpoint(currentFile.value, lineno, 'true') )
							breakpointList[lineno] = 'true';
					}
				}
				code.treeBoxObject.invalidateRow(lineno-1);
			}, false);
			
			
			this.UpdateCurrentFile = function(filename, prevFilename) {

				if ( filename == prevFilename )
					return;

				if ( prevFilename )
					code.treeBoxObject.rowCountChanged(0, -sourceFiles[prevFilename].code.length);

				if ( !(currentFile.value in sourceFiles) ) {
				
					var codeText = debuggerRpc.GetSource(currentFile.value);
					codeText = codeText.replace(/\t/g, '    ');
					var codeLines = codeText.split(/\r?\n/);
					sourceFiles[currentFile.value] = { code:codeLines };
				}

				breakpointList = debuggerRpc.BreakpointList(currentFile.value);

				cache_prevStackLines = {};
				for each ( var level in programStack.value )
					if ( level.filename == currentFile.value )
						cache_prevStackLines[level.lineno] = level.index;
				
				code.treeBoxObject.rowCountChanged(0, sourceFiles[currentFile.value].code.length);
			}
			
			this.Update = function(stackFrame) {
			
				while (reset.length) reset.shift()();
			
				var filename = stackFrame.filename;
				var lineno = stackFrame.lineno;
			
				currentFile.value = filename;
				code.treeBoxObject.ensureRowIsVisible(lineno-1);

				reset.push( function() code.treeBoxObject.invalidateRow(lineno-1) );
			 	code.treeBoxObject.invalidateRow(lineno-1);

				cache_prevStackLines = {};
				for each ( var level in programStack.value )
					if ( level.filename == currentFile.value )
						cache_prevStackLines[level.lineno] = level.index;

			 	// http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeBoxObject.html#method_rowCountChanged
			 	// https://developer.mozilla.org/en/nsITreeView#performActionOnRow.28.29
			}
			
			selectedStackFrame.Listen(function(newVal) self.Update(newVal));
			currentFile.Listen(function(newVal, prevVal) self.UpdateCurrentFile(newVal, prevVal));
		}
	]]></script>
	
	<commandset>
		<command id="cmd_step" oncommand="debuggerRpc.Action('step'); UpdateState()"/>
		<command id="cmd_stepover" oncommand="debuggerRpc.Action('stepover'); UpdateState()"/>
		<command id="cmd_stepthrough" oncommand="debuggerRpc.Action('stepthrough'); UpdateState()"/>
		<command id="cmd_stepout" oncommand="debuggerRpc.Action('stepout'); UpdateState()"/>
		<command id="cmd_continue" oncommand="debuggerRpc.Action('continue'); UpdateState()"/>
		<command id="cmd_frameup" oncommand="if (selectedStackFrame.value.index > 0) stackManager.Select( selectedStackFrame.value.index - 1 )"/>
		<command id="cmd_framedown" oncommand="if (programState.value.stackFrameIndex > selectedStackFrame.value.index) stackManager.Select( selectedStackFrame.value.index + 1 )"/>
	</commandset>
	<keyset>
	  <key keycode="VK_F8" command="cmd_continue"/>
	  <key keycode="VK_F10" command="cmd_stepover"/>
	  <key modifiers="shift" keycode="VK_F10" command="cmd_stepout"/>
	  <key keycode="VK_F11" command="cmd_step"/>
	  <key modifiers="shift" keycode="VK_F11" command="cmd_stepthrough"/>
	  <key keycode="VK_DOWN" command="cmd_stepover"/>
	  <key modifiers="control" keycode="VK_DOWN" command="cmd_stepthrough"/>
	  <key keycode="VK_LEFT" command="cmd_stepout"/>
	  <key modifiers="control" keycode="VK_LEFT" command="cmd_continue"/>
	  <key keycode="VK_RIGHT" command="cmd_step"/>
	  <key modifiers="shift" keycode="VK_UP" command="cmd_frameup"/>
	  <key modifiers="shift" keycode="VK_DOWN" command="cmd_framedown"/>
	</keyset>
	<hbox flex="1">
		<tree id="code" hidecolumnpicker="false" flags="dont-build-content" flex="1" seltype="single">
		  <treecols>
			 <treecol id="line" label="line"/>
			 <splitter class="tree-splitter"/>
			 <treecol id="bp" label="break condition" hidden="true"/>
			 <splitter class="tree-splitter"/>
			 <treecol id="sl" label="stack level" hidden="true"/>
			 <splitter class="tree-splitter"/>
			 <treecol id="code" label="code" flex="1"/>
		  </treecols>
		  <treechildren/>
		</tree>
		<splitter><grippy/></splitter>
		<vbox>
			<listbox id="stack" flex="1" onselect="if ( event.target.selectedItem ) stackManager.Select(Number(event.target.selectedItem.value))"/>
			<splitter><grippy/></splitter>
			<tree id="watch" hidecolumnpicker="false" flags="dont-build-content" context="watchContextMenu" flex="1">
				<menupopup id="watchContextMenu">
					<menuitem label="remove" oncommand="var idx = $('watch').currentIndex; if ( idx != -1 ) watchManager.RemoveIndex(idx);"/>
					<menuitem label="remove all" oncommand="watchManager.RemoveAll();"/>
				</menupopup>
				<treecols>
					<treecol id="expression" label="Expression" primary="true" flex="1"/>
					<splitter class="tree-splitter"/>
					<treecol id="value" label="Value" flex="5"/>
					<splitter class="tree-splitter"/>
					<treecol id="source" label="Source" hidden="true" flex="1"/>
			  </treecols>
			  <treechildren/>
			</tree>
			<splitter><grippy/></splitter>
			<textbox onchange="watchManager.Add(this.value); this.value=''"/>
		</vbox>
	</hbox>
	<toolbox>
		<toolbar id="nav-toolbar">
			<toolbarbutton label="Step" tooltiptext="F11" command="cmd_step"/>
			<toolbarbutton label="over" tooltiptext="F10" command="cmd_stepover"/>
			<toolbarbutton label="out" tooltiptext="Shift-F10" command="cmd_stepout"/>
			<toolbarbutton label="through" tooltiptext="Shift-F11" command="cmd_stepthrough"/>
			<toolbarbutton label="Continue" tooltiptext="F8" command="cmd_continue"/>
			<toolbarseparator/>
			<menu label="scripts" onpopupshowing="for each (var item in debuggerRpc.GetScriptList()) this.appendItem(item)" onpopuphidden="while(this.removeItemAt(0));" oncommand="currentFile.value = event.target.label">
				<menupopup/>
			</menu>
		</toolbar>
	</toolbox>
	<statusbar>
		<statusbarpanel id="statusInfo" flex="1"/>
	</statusbar>
</window>
