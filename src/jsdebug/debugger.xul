<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: GNU GPL 2.0
   - 
   - The contents of this file are subject to the
   - GNU General Public License Version 2.0; you may not use this file except
   - in compliance with the License. You may obtain a copy of the License at
   - http://www.gnu.org/licenses/gpl.html
   - 
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="data:text/css,

	#code2 :-moz-tree-row(selected) { background-color: transparent }
	#code2 :-moz-tree-cell-text(selected) { color: inherit }
	#code2 :-moz-tree-cell-text(line) { color: white; }
	#code2 :-moz-tree-cell-text(code) { font-family: monospace }

	#code2 :-moz-tree-column(line) { background-color: silver }
	#code2 :-moz-tree-column(bp) { background-color: silver }
	#code2 :-moz-tree-cell(currentLine) { background-color: #FFA }
	#code2 :-moz-tree-cell(prevLine) { background-color: #AFA }
	#code2 :-moz-tree-cell(exception) { background-color: #FAA }
	#code2 :-moz-tree-cell(breakpoint) { background-color: red }
	#code2 :-moz-tree-cell(condBreakpoint) { background-color: orange }

" type="text/css"?>

<window id="window"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:html="http://www.w3.org/1999/xhtml"
	onload="init(event)"
>
	<script type="text/javascript"><![CDATA[
		
		function Trace() window.console.debug.apply(this, arguments);
		
		function Stack() { try { throw Error() } catch (ex) { return 'stack:\n'+String(ex.stack).split('\n').slice(2).join('\n') }}        		
		
		function $(id) document.getElementById(id);
		
		function QueryPrivilege() {

			netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect UniversalBrowserRead UniversalBrowserWrite');
			netscape.security.PrivilegeManager.revertPrivilege('UniversalXPConnect UniversalBrowserRead UniversalBrowserWrite');
		}
		
		function CallWithPrivilege( privilege, fct ) {
			
			netscape.security.PrivilegeManager.enablePrivilege(privilege);
			var ret = fct();
			netscape.security.PrivilegeManager.revertPrivilege(privilege);
			return ret;
		}
		
		function AddProp(props, prop) {

			netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
			var aserv = Components.classes["@mozilla.org/atom-service;1"].getService(Components.interfaces.nsIAtomService);
			props.AppendElement(aserv.getAtom(prop));
			netscape.security.PrivilegeManager.revertPrivilege('UniversalXPConnect');
		}
		
		DefaultTreeView = {
			QueryInterface: function QueryInterface(aIID) {
				with (Components.interfaces)
					if ( nsITreeView.equals(aIID) || nsIClassInfo.equals(aIID) || nsISupportsWeakReference.equals(aIID) || nsISupports.equals(aIID))
						return this;
				throw 0x80004002; // Components.results.NS_NOINTERFACE;
			},
			getInterfaces: function getInterfaces(count) {
				count.value = 4;
				with (Components.interfaces) 
					return [ nsITreeView, nsIClassInfo, nsISupportsWeakReference, nsISupports];
			},
			getHelperForLanguage: function getHelperForLanguage(language) null,
			get contractID() null,
			get classDescription() 'myDefaultTreeView',
			get classID() null,
			get implementationLanguage() Components.interfaces.nsIProgrammimgLanguage.JAVASCRIPT,
			get flags() Components.interfaces.nsIClassInfo.MAIN_THREAD_ONLY | Components.interfaces.nsIClassInfo.DOM_OBJECT,
			setTree: function(treebox) { this.treebox = treebox; },
			cycleHeader: function(col) {},
			isSeparator: function(row) false,
			isSorted: function() false,
			getImageSrc: function(row,col) null,
			getRowProperties: function(row,props) {},
			getCellProperties: function(row,col,props) {},
			getColumnProperties: function(colid,col,props) {},
		
			getParentIndex: function(row) -1,
			hasNextSibling: function(row) false,
			RowHasChild: function(row) false,
			get rowCount() 0,
			getCellText: function(row, column) '',
			isContainer: function(row) false,
			isContainerEmpty: function(row) true,
			isContainerOpen: function(row) false,
			toggleOpenState: function(row) {},
			getLevel: function(row) 0,
		};
		
		function TreeView( dataProvider ) {
		
			this.dataProvider = dataProvider;
			this.view = [];
		}

		TreeView.prototype = {
			__proto__: DefaultTreeView,

			RowHasChild: function(row) {
			
				if ( row < this.view.length-1 )
					return this.view[row].every(function(elt, i) this.view[row+1][i] == elt, this);
			},
		
			get rowCount() {
			
				return this.view.length;
			},
			
			getCellText : function(row, column) {
				
				return this.dataProvider(this.view[row], column.id);
			},
		
			isContainer: function(row) {
				
				return this.dataProvider(this.view[row], 'hasChild');
			},
		
			isContainerEmpty: function(row) { 
				
				return false; 
			},
		
			isContainerOpen: function(row) {
			
				return this.RowHasChild(row);
			},

			getLevel: function(row) {
			
				return this.view[row].length-1;
			},
			
			toggleOpenState: function(row) {
				
				var count = 0;
				if ( this.RowHasChild(row) ) {
						
					while ( this.RowHasChild(row) ) {
						
						count--;
						this.view.splice(row+1, 1);
					}
				} else {
					
					for each ( var p in this.dataProvider(this.view[row], 'childList') ) {
					
						count++;
						this.view.splice(row+count, 0, this.view[row].concat(p));
					}
				}
				this.treebox.rowCountChanged(row+1, count);
			},
		
			Add: function(name, val) {
				
				this.view.push([name]);
				this.treebox.rowCountChanged(this.view.length-1, 1); // http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeBoxObject.html
				this.treebox.ensureRowIsVisible(this.view.length-1);
			},
			
			Invalidate: function() {
				
				var tv = this.treebox;
				setTimeout(function() tv.invalidate(), 50);
			}
		}
		
		
		function TextToHTMLNode(doc, text) {
			
			var elt = doc.createElement('div');
			elt.innerHTML = text;
			return elt.firstChild;
		}
		
		function XPath(ref, xpath) {
			
			doc = ref.ownerDocument || ref;
			var result = doc.evaluate(xpath, ref, null, XPathResult.ANY_TYPE, null);
			switch (result.resultType) {

				case XPathResult.NUMBER_TYPE:
					return result.numberValue;
				case XPathResult.BOOLEAN_TYPE:
					return result.booleanValue;
				case XPathResult.STRING_TYPE:
					return result.stringValue;
			} // else XPathResult.UNORDERED_NODE_ITERATOR_TYPE
			var list = [];
			for ( var node = result.iterateNext(); node; node = result.iterateNext() )
				switch ( node.nodeType ) {
				case node.ATTRIBUTE_NODE:
					list.push( node.value );
					break;
				case node.TEXT_NODE:
					list.push( node.data );
					break;
				default:
					list.push( node );
				}
			return list;
		}

		function StringReplacer(conversionObject) function(s) s.replace(new RegExp([k.replace(/(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\)/g, "\\$1") for (k in conversionObject)].join('|'), 'g'), function(str) conversionObject[str]);

		var EscapeEntities = StringReplacer({'&':'&amp;', '<':'&lt;', '>':'&gt;'});
		
		function InsertNode(node, pos) pos.parentNode.insertBefore(node, pos);
		
		function InsertNodeAtBeginning(node, parent) parent.firstChild ? parent.insertBefore(node, parent.firstChild) : parent.appendChild(node);

		function ElementAbsolutePosition(elt) [(function(o) o.offsetLeft + (o.offsetParent ? arguments.callee(o.offsetParent) : 0))(elt), (function(o) o.offsetTop + (o.offsetParent ? arguments.callee(o.offsetParent) : 0))(elt)];
		
		function HasClass(elt, class) (' '+elt.className+' ').indexOf(' '+class+' ') != -1;

		function SetClass(polarity, elt, class) {
		
			class = ' '+class+' ';
			var str = ' '+elt.className+' ';
			var pos = str.lastIndexOf(class);
			if (polarity != (pos != -1))
				elt.className = polarity ? str+class : str.substr(0, pos+1)+str.substr(pos+class.length);
		}

		function SetInView(elt, offset) {

			var pos = ElementAbsolutePosition(elt)[1];
			var body = elt.ownerDocument.body;
			if ( pos < body.scrollTop || pos + elt.offsetHeight > body.scrollTop + body.clientHeight ) {
			
				elt.scrollIntoView();
				body.scrollTop += offset || 0;
			}
		}
      
      function SimpleRpc(ip, port) {
      
      	this.__noSuchMethod__ = function() {

				netscape.security.PrivilegeManager.enablePrivilege('UniversalBrowserRead'); // allow cross-domain xhr
				var xhr = new XMLHttpRequest();
				try {

					xhr.open('POST', 'http://'+ip+':'+port+'/', false);
					xhr.send(uneval(Array.slice(arguments)));
					return eval('('+xhr.responseText+')');
				} catch(ex) {
				
					return new Error(ex);
				} finally {
				
					netscape.security.PrivilegeManager.revertPrivilege('UniversalBrowserRead');
				}
			}
		}      
      
		function Variable() {
			
			var value, listeners = [];
			this.Listen = function(fct) listeners.push(fct);
			this.__defineGetter__('value', function() value);
			this.__defineSetter__('value', function(val) {
				var prev = value;
				value = val;
				for each ( lis in listeners )
					lis(value, prev);
			});
		}
		
      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		var watchManager, stackManager, codeManager, breakpointManager;

		var programState = new Variable();
		var selectedStackFrame = new Variable();
				
		var debuggerRpc = new SimpleRpc('127.0.0.1', 8009);

		function init() {

			QueryPrivilege();
			
			watchManager = new WatchManager();
			stackManager = new StackManager();
			codeManager2 = new CodeManager2();

			ConnectRetry();
		}

		var retryCount = 0;
		function ConnectRetry() {

			retryCount++;
			if ( debuggerRpc.Ping() != true ) {
				
				setTimeout( arguments.callee, retryCount < 10 ? 0 : 1000 );
			} else {
				
				retryCount = 0;
				UpdateState();	
			}
		}
		
		
		function UpdateState() {
		
			$('statusInfo').label = 'querying state...';
			var s = debuggerRpc.State();
			
			if ( !(s instanceof Error) ) {

				$('statusInfo').label = 'break: '+s.breakOrigin + ( s.hasException ? ' ('+s.exception+')' : '' );
				programState.value = s;
				selectedStackFrame.value = debuggerRpc.GetStackFrame(s.stackFrameIndex);
			} else {

				$('statusInfo').label = 'disconnected';
				ConnectRetry();
			}
		}


		function StackManager() {
			
			var self = this;
			var stack2 = $('stack2');
			
			this.UpdateSelection = function(stackFrame) {
				
				stack2.setAttribute('suppressonselect', true);
				stack2.selectedIndex = stack2.itemCount - 1 - stackFrame.index;
				stack2.removeAttribute('suppressonselect');
			}
						
			this.UpdateContent = function() {

				stack2.selectedIndex = -1;
				while ( stack2.removeItemAt(0) );
				var programStack = debuggerRpc.GetStack();
				for ( var [i, l] in Iterator(programStack) )
					var e = stack2.appendItem(l.filename+':'+l.lineno+' - '+l.contextName, programStack.length - 1 - i);
			}
			
			this.Select = function( index ) {
				
				selectedStackFrame.value = debuggerRpc.GetStackFrame(index);
			}
			
			selectedStackFrame.Listen(function(newVal) self.UpdateSelection(newVal));
			programState.Listen(function(newVal) self.UpdateContent(newVal));
		}


		function WatchManager() {
			
			var self = this;
			var watch2 = $('watch2');
	
			var cache = {};

			function DataProvider(path, type) {
				
				id = path.join('.');
				var expInfo = id in cache ? cache[id] : (cache[id] = debuggerRpc.ExpressionInfo(path, selectedStackFrame.value.index));

				switch (type) {
					case 'hasChild':
						return expInfo.isObject;
					case 'childList':
						return expInfo.childList;
					case 'expression':
						return path[path.length-1];
					case 'value':
						return expInfo.string;
					case 'source':
						return expInfo.source;
				}
			}
			
			var treeView = new TreeView(DataProvider);
			CallWithPrivilege('UniversalBrowserWrite', function() { watch2.view = treeView });
			
			this.Update = function( stackFrameIndex ) {
				
				cache = {};
				treeView.Invalidate();
			}
			
			this.Add = function(expression) {
				
				treeView.Add(expression);
			}
			
			selectedStackFrame.Listen(function(newVal) self.Update(newVal));
		}


		
		function CodeManager2() {
			
			var self = this;
			var code2 = $('code2');

			var reset = [];
			
			var currentFile;
			var sourceFiles = {};
			var breakpointList = {};
			
			var listView = {
				__proto__: DefaultTreeView,
				getCellText: function(row, col) {
					
					if ( !currentFile )
						return;
					switch ( col.id ) {
						case 'line':
							return row+1;
						case 'bp':
							return breakpointList[row+1];
						case 'code':
							return sourceFiles[currentFile].code[row];
					}
				},
				getCellProperties: function(row, col, props) {
					
					if ( !currentFile )
						return;
					var lineno = row+1;
					switch ( col.id ) {
						case 'line':
						case 'bp':
							if ( lineno in breakpointList )
								AddProp(props, breakpointList[lineno] == 'true' ? 'breakpoint' : 'condBreakpoint');
							break;
						case 'code':
						
							if ( lineno == programState.value.lineno && selectedStackFrame.value.index == programState.value.stackFrameIndex ) {
								
								AddProp(props, 'currentLine');
								if ( programState.value.hasException )
									AddProp(props, 'exception');
								break;
							}

							if ( lineno == selectedStackFrame.value.lineno && programState.value.stackFrameIndex > selectedStackFrame.value.index )
								AddProp(props, 'prevLine');
							break;
					}
				}
			}
			
			reset.push(function() {
				CallWithPrivilege('UniversalBrowserWrite', function() { code2.view = listView });
			});
			
			var row={}, col={}, childElt={};
			var x={}, y={}, width={}, height={};

/*
			code2.addEventListener('mousemove', function(ev) {
				
				code2.treeBoxObject.getCellAt(ev.clientX, ev.clientY, row, col, childElt);
				if ( row.value == -1 || col.value == null || col.value.id != 'code' || childElt.value != 'text' )
					return;
				var text = sourceFiles[currentFile].code[row.value];
				code2.treeBoxObject.getCoordsForCellItem( row, col.value, 'text', x, y, width, height );
				var pos = ev.clientX - code2.boxObject.x - x.value;
				Trace( text[Math.floor(pos/7)], width.value )
			}, false);
*/
			
			code2.addEventListener('click', function(ev) {
				
				var res = code2.treeBoxObject.getCellAt(ev.clientX, ev.clientY, row, col, childElt);
				if ( res == -1 || col.value == null || col.value.id != 'line' && col.value.id != 'bp' )
					return;
				lineno = row.value+1; // lineno = debuggerRpc.GetActualLineno(currentFile, lineno);

				if ( ev.shiftKey ) {
					
					var condition = prompt('Breakpoint condition', breakpointList[lineno]);
					if ( condition != null && debuggerRpc.AddBreakpoint(currentFile, lineno, condition) )
						breakpointList[lineno] = condition;
				} else {

					if ( lineno in breakpointList ) {

						if ( debuggerRpc.RemoveBreakpoint(currentFile, lineno) )
							delete breakpointList[lineno];
					} else {

						if ( debuggerRpc.AddBreakpoint(currentFile, lineno, 'true') )
							breakpointList[lineno] = 'true';
					}
				}
				code2.treeBoxObject.invalidateRow(lineno-1);
			}, false);
			
			
			this.ShowFile = function(filename) {
				
				if ( filename == currentFile )
					return;

				if ( currentFile )
					code2.treeBoxObject.rowCountChanged(0, -sourceFiles[currentFile].code.length);

				if ( !(filename in sourceFiles) ) {
				
					var codeText = debuggerRpc.GetSource(filename);
					codeText = codeText.replace(/\t/g, '    ');
					var codeLines = codeText.split(/\r?\n/);
					sourceFiles[filename] = { code:codeLines };
				}
				currentFile = filename;
				code2.treeBoxObject.rowCountChanged(0, sourceFiles[currentFile].code.length);
				
				breakpointList = debuggerRpc.BreakpointList(currentFile);
			}
			
			this.Update = function(stackFrame) {
			
				while (reset.length) reset.shift()();
			
				var filename = stackFrame.filename;
				var lineno = stackFrame.lineno;
				var hasException = stackFrame.index == programState.value.stackFrameIndex ? programState.value.hasException : undefined;
			
				this.ShowFile(filename);
				code2.treeBoxObject.ensureRowIsVisible(lineno-1);

				reset.push( function() listView.treebox.invalidateRow(lineno-1) );
			 	listView.treebox.invalidateRow(lineno-1);
			 	
			 	// http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeBoxObject.html#method_rowCountChanged
			 	// https://developer.mozilla.org/en/nsITreeView#performActionOnRow.28.29
			 	// https://developer.mozilla.org/En/XUL_Tutorial/Styling_a_Tree
			}

			selectedStackFrame.Listen(function(newVal) self.Update(newVal));
		}
	]]></script>

	<vbox flex="1">
		<commandset>
			<command id="cmd_step" oncommand="debuggerRpc.Action('step'); UpdateState()"/>
			<command id="cmd_stepover" oncommand="debuggerRpc.Action('stepover'); UpdateState()"/>
			<command id="cmd_stepthrough" oncommand="debuggerRpc.Action('stepthrough'); UpdateState()"/>
			<command id="cmd_stepout" oncommand="debuggerRpc.Action('stepout'); UpdateState()"/>
			<command id="cmd_continue" oncommand="debuggerRpc.Action('continue'); UpdateState()"/>
			<command id="cmd_frameup" oncommand="if (selectedStackFrame.value.index > 0) stackManager.Select( selectedStackFrame.value.index - 1 )"/>
			<command id="cmd_framedown" oncommand="if (programState.value.stackFrameIndex > selectedStackFrame.value.index) stackManager.Select( selectedStackFrame.value.index + 1 )"/>
		</commandset>
		<keyset>
		  <key keycode="VK_F8" command="cmd_continue"/>
		  <key keycode="VK_F10" command="cmd_stepover"/>
		  <key modifiers="shift" keycode="VK_F10" command="cmd_stepout"/>
		  <key keycode="VK_F11" command="cmd_step"/>
		  <key modifiers="shift" keycode="VK_F11" command="cmd_stepthrough"/>
		  <key keycode="VK_DOWN" command="cmd_stepover"/>
		  <key modifiers="control" keycode="VK_DOWN" command="cmd_stepthrough"/>
		  <key keycode="VK_LEFT" command="cmd_stepout"/>
		  <key modifiers="control" keycode="VK_LEFT" command="cmd_continue"/>
		  <key keycode="VK_RIGHT" command="cmd_step"/>
		  <key modifiers="shift" keycode="VK_UP" command="cmd_frameup"/>
		  <key modifiers="shift" keycode="VK_DOWN" command="cmd_framedown"/>
		</keyset>
		<hbox flex="1">
			<tree id="code2" hidecolumnpicker="false" flags="dont-build-content" flex="1" seltype="single">
			  <treecols>
				 <treecol id="line" label="line"/>
				 <splitter class="tree-splitter"/>
				 <treecol id="bp" label="breakpoint" hidden="true"/>
				 <splitter class="tree-splitter"/>
				 <treecol id="code" label="code" flex="1"/>
			  </treecols>
			  <treechildren/>
			</tree>
			<splitter><grippy/></splitter>
			<vbox>
				<listbox id="stack2" flex="1" onselect="if ( event.target.selectedItem ) stackManager.Select(Number(event.target.selectedItem.value))"/>
				<splitter><grippy/></splitter>
				<tree id="watch2" hidecolumnpicker="true" flags="dont-build-content" flex="1">
				  <treecols>
					 <treecol id="expression" label="Expression" primary="true" flex="1"/>
					 <splitter class="tree-splitter"/>
					 <treecol id="value" label="Value" flex="5"/>
					 <splitter class="tree-splitter"/>
					 <treecol id="source" label="Source" flex="1"/>
				  </treecols>
				  <treechildren/>
				</tree>
				<splitter><grippy/></splitter>
				<textbox onchange="watchManager.Add(this.value); this.value=''"/>
			</vbox>
		</hbox>
		<toolbox>
			<toolbar id="nav-toolbar">
				<toolbarbutton label="Step" tooltiptext="F11" command="cmd_step"/>
				<toolbarbutton label="over" tooltiptext="F10" command="cmd_stepover"/>
				<toolbarbutton label="out" tooltiptext="Shift-F10" command="cmd_stepout"/>
				<toolbarbutton label="through" tooltiptext="Shift-F11" command="cmd_stepthrough"/>
				<toolbarbutton label="Continue" tooltiptext="F8" command="cmd_continue"/>
				<toolbarseparator/>
				<menu label="scripts" onpopupshowing="for each ( var item in debuggerRpc.GetScriptList() ) this.appendItem(item)" onpopuphidden="while(this.removeItemAt(0));" oncommand="codeManager2.ShowFile(event.target.label)">
					<menupopup/>
				</menu>
			</toolbar>
		</toolbox>
		<statusbar>
			<statusbarpanel id="statusInfo" flex="1"/>
		</statusbar>
	</vbox>
</window>
