<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: GNU GPL 2.0
   - 
   - The contents of this file are subject to the
   - GNU General Public License Version 2.0; you may not use this file except
   - in compliance with the License. You may obtain a copy of the License at
   - http://www.gnu.org/licenses/gpl.html
   - 
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="data:text/css,

#code { 
	background-color: white;
	font-family: monospace;
/*	-moz-tab-size: 4;*/
}

" type="text/css"?>

<window id="window"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:html="http://www.w3.org/1999/xhtml"
	onload="init(event)"
>
	<script type="text/javascript"><![CDATA[

function Trace() window.console && window.console.debug.apply(this, arguments);

function Stack() { try { throw Error() } catch (ex) { return 'stack:\n'+String(ex.stack).split('\n').slice(2).join('\n') }}        		

function $(id) document.getElementById(id);

function Strdup(s, n) {

	for ( var res = ''; n--;  res += s );
	return res;
}

function LTrim(str) str.substr(str.search(/\S/));

function QueryPrivilege() {

	netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect UniversalBrowserRead UniversalBrowserWrite');
	netscape.security.PrivilegeManager.revertPrivilege('UniversalXPConnect UniversalBrowserRead UniversalBrowserWrite');
}

function CallWithPrivilege( privilege, fct ) {

	netscape.security.PrivilegeManager.enablePrivilege(privilege);
	try {
		var ret = fct.apply(this, arguments);
	} catch(ex) {}
	netscape.security.PrivilegeManager.revertPrivilege(privilege);
	return ret;
}


function RemoteMessageClient(ip, port) {

	var _this = this;
	var requestList = [], xhrPool = [], xhrMax = 2;
	for ( var i = 0; i < xhrMax; i++ )
		xhrPool.push(new XMLHttpRequest());

	this.Send = function Send(message) {

		requestList.push(message);
		if ( xhrPool.length >= 1 ) {

			var xhr = xhrPool.shift();
			netscape.security.PrivilegeManager.enablePrivilege('UniversalBrowserRead'); // allow cross-domain xhr
			xhr.open('POST', 'http://'+ip+':'+port+'/', true);
			xhr.onreadystatechange = function() {

				if ( xhr.readyState != 4 )
					return;
				var res = xhr.responseText;

Trace('receive', res);

				xhrPool.push(xhr);
				if ( xhr.status == 200 && res && _this.onMessage )
					_this.onMessage(res);
				if ( requestList.length || xhrPool.length == xhrMax )
					Send(requestList.pop());
			}
			var data = requestList.shift();
			xhr.send(data);
Trace('send', data);
			netscape.security.PrivilegeManager.revertPrivilege('UniversalBrowserRead');
		}
	}
	this.Send();
}

function RemoteCall( remoteMessage ) {

	var _this = this;
	this.__noSuchMethod__ = function() {

		remoteMessage.Send(uneval(Array.slice(arguments)));
	}

	remoteMessage.onMessage = function( message ) {

		if ( !message )
			return;
		var call = eval('('+message+')');
		_this.api[call[0]].apply(_this.api, call[1]);
	}
}

// tools
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// application		
		
		function CodeEditor(editorElement) {
			
			var _this = this;
			
			var timeout;
			editorElement.addEventListener('keydown', function(ev) {

				var elt = ev.target;
				var val = elt.value;
				var start = elt.selectionStart;
				var end = elt.selectionEnd;
				switch ( ev.keyCode ) {
				case 9:
					if ( start == end ) {
						
						val = val.substr(0, start) + '\t' + val.substr(end);
						start++;
						end = start;
					} else {

						var tmp = [ '\t'+line for each ( line in val.substr(start, end).split('\n') ) ].join('\n');
						val = val.substr(0, start) + tmp + val.substr(end);
						end = start + tmp.length;
					}
					break;
				case 13:
					if ( start == end ) {

						var pos = val.lastIndexOf( '\n', start - 1 ) + 1;
						var pad = '\n';
						for ( var i = pos; val[i] == ' ' || val[i] == '\t'; i++ )
							pad += val[i];
						val = val.substr(0, start) + pad + val.substr(end);
						start += pad.length;
						end = start;
					}
					break;
				default:
					return;
				}				
				ev.preventDefault();
				ev.stopPropagation();
				elt.value = val;
				elt.selectionStart = start;
				elt.selectionEnd = end;
				
			}, true);

			editorElement.addEventListener('keyup', function(ev) {

				clearTimeout(timeout);
				timeout = setTimeout(function() {

					_this.onChange && _this.onChange(editorElement.value);
				}, 300);
			}, false);
		}
		
		
		function ControllerManager(container) {
			
			var _this = this;
			var _parser = new DOMParser();
			function XULToNode(xulString) {

				var doc = _parser.parseFromString('<dummy xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:html="http://www.w3.org/1999/xhtml">'+xulString+'</dummy>', 'text/xml').documentElement;
				if ( doc.tagName == 'parsererror' )
					throw('Parsing Error');
				return window.document.importNode(doc, true).firstChild;
			}

			function SetDefault(options, def) {
				
				options = options || {};
				for ( p in def )
					if ( !(p in options) )
						options[p] = def[p];
				return options;
			}

			var updatedValues;
			
			this.GetValues = function() {
				
				var tmp = updatedValues;
				updatedValues = {};
				return tmp;
			}

			function Changing(name) {
			
				updatedValues[name] = controlerList[name];
				_this.onChange && _this.onChange(name);
			}

			var controlerList;
			function DefineAccess(name, getter, setter) {
			
				controlerList.__defineGetter__(name, getter);
				controlerList.__defineSetter__(name, setter);
			}

			this.SetUserInterface = function(code) {
			
				controlerList = {};
				updatedValues = {};

				_this.__proto__ = controlerList;
			
//				container.style.display = 'none';
				while ( container.firstChild )
					container.removeChild(container.firstChild);
			
				var box = container.appendChild(XULToNode('<hbox style="padding: 4px"/>'));
				container.appendChild(box);

				with({
					get br() {

						box = document.createElement('hbox');
						container.appendChild(box);
					},
					get hr() {

						box = XULToNode('<hbox style="padding: 4px;border-top: 2px groove white"/>');
						container.appendChild(box);
					},
					get spacer() {

						var widget = document.createElement('spacer');
						widget.setAttribute('flex', '1');
						box.appendChild(widget);
					},
					slider:function(name, opt) {

						opt = SetDefault(opt, { min:-1, max:1, step:0.1, w:'' });
						var ratio = 1 / opt.step; // float support
						var xul = XULToNode('<vbox tooltiptext="'+name+'" align="center"><hbox align="center"><label value="'+opt.min+'"/><scale width="'+opt.w+'" min="'+opt.min*ratio+'" max="'+opt.max*ratio+'" increment="'+opt.step*ratio+'" pageincrement="'+opt.step*ratio*10+'"/><label value="'+opt.max+'"/></hbox><label value="" style="color:gray"/></vbox>');
						var widget = xul.firstChild.firstChild.nextSibling;
						var label = xul.lastChild;
						DefineAccess(name, function() widget.value/ratio, function(val) { widget.value = val*ratio; label.value = val });
						widget.addEventListener('change', function() {

							value = widget.value/ratio;
							label.value = value;
							widget.setAttribute('tooltiptext', value);
							Changing(name);
						}, false);
						box.appendChild(xul);
					},
					button:function(name, opt) {

						opt = SetDefault(opt, { text:name }); 
						var xul = XULToNode('<vbox tooltiptext="'+name+'"><button type="checkbox" label="'+opt.text+'"/></vbox>');
						var widget = xul.firstChild;
						DefineAccess(name, function() widget.checked, function(val) widget.checked = val);
						widget.addEventListener('command', function() {

							widget.setAttribute('tooltiptext', name+'='+widget.checked);
							Changing(name);
						}, false);
						box.appendChild(xul);
					},
					check:function(name, opt) {

						opt = SetDefault(opt, { text:name }); 
						var xul = XULToNode('<vbox tooltiptext="'+name+'"><checkbox label="'+opt.text+'" width="'+opt.width+'"/></vbox>');
						var widget = xul.firstChild;
						DefineAccess(name, function() widget.checked, function(val) widget.checked = val);
						widget.addEventListener('command', function() {

							widget.setAttribute('tooltiptext', name+'='+widget.checked);
							Changing(name);
						}, false);
						box.appendChild(xul);
					},
					field:function(name, opt) {

						opt = SetDefault(opt, { text:name, w:'', lines:1 }); 
						var xul = XULToNode('<vbox tooltiptext="'+name+'" width="'+opt.w+'"><textbox multiline="'+(opt.lines>1)+'" rows="'+opt.lines+'"/></vbox>');
						var widget = xul.firstChild;
						widget.emptyText = name + ' ?';
						DefineAccess(name, function() widget.value, function(val) widget.value = val);
						widget.addEventListener('input', function() {

							widget.setAttribute('tooltiptext', name+'='+widget.value);
							Changing(name);
						}, false);
						box.appendChild(xul);
					},
					label:function(name, opt) {

						opt = SetDefault(opt, { text:name }); 
						var xul = XULToNode('<vbox tooltiptext="'+name+'"><hbox><label value="'+opt.text+'"/><label/></hbox></vbox>');
						var widget = xul.firstChild.firstChild.nextSibling;
						DefineAccess(name, function() widget.getAttribute('value'), function(val) { widget.setAttribute('value', val) });
						box.appendChild(xul);
					},
					color:function(name, opt) {

						opt = SetDefault(opt, {}); 
						var xul = XULToNode('<vbox tooltiptext="'+name+'"><colorpicker type="button"/></vbox>');
						var widget = xul.firstChild;
						DefineAccess(name, function() widget.color, function(val) widget.color = val);
						widget.addEventListener('select', function() {

							widget.setAttribute('tooltiptext', name+'='+widget.color);
							Changing(name);
						}, false);
						box.appendChild(xul);
					},
					radio:function(name, values, opt) {

						opt = SetDefault(opt, { ro:false });
						var xul = XULToNode('<radiogroup tooltiptext="'+name+'">'+['<radio label="'+name+'" value="'+name+'"/>' for each (name in values)].join('')+'</radiogroup>');
						var widget = xul;
						DefineAccess(name, function() widget.value, function(val) widget.value = val);
						widget.addEventListener('select', function() {

							Changing(name);
						}, false);
						box.appendChild(xul);
					},
					area:function(name, opt) {

						opt = SetDefault(opt, { w:100, h:100 });
						var xul = XULToNode('<vbox tooltiptext="'+name+'" style="-moz-user-focus: normal"><canvas xmlns="http://www.w3.org/1999/xhtml" width="'+opt.w+'" height="'+opt.h+'" style="border: 1px solid gray"/><label value=""/></vbox>');
						var canvas = xul.firstChild;
						var ctx = canvas.getContext('2d');
						var w = canvas.width, h = canvas.height;
						var label = xul.firstChild.nextSibling;

						var x=0, y=0;
						var draw = false;

						function UpdateView() {

							ctx.clearRect(0, 0, w, h);
							ctx.fillStyle = draw ? 'red' : 'black';

							var px = (x/2+0.5)*w;
							var py = (y/2+0.5)*h;
							ctx.fillRect(0,py,w,1);
							ctx.fillRect(px,0,1,h);
							label.value = x.toFixed(2)+' , '+y.toFixed(2);
						}

						DefineAccess(name, function() [x,y], function(val) { x = val[0]; y = val[1]; Update() });

						canvas.addEventListener('mousedown', function(ev) { draw = !draw; UpdateView() }, true);

						if ( opt.reset )
							canvas.addEventListener('mouseup' , function(ev) { draw = false; x=0; y=0; Changing(name); UpdateView() }, true);

						canvas.addEventListener('mousemove', function(ev) {

							if ( !draw )
								return;
							var px = ev.layerX - canvas.parentNode.boxObject.x;
							x = (px/w - 0.5) * 2;
							var py = ev.layerY - canvas.parentNode.boxObject.y;
							y = (py/h - 0.5) * 2;
							UpdateView();
							Changing(name);
						}, false);
						box.appendChild(xul);
					},
					image:function(name, opt) {
					
						opt = SetDefault(opt, { w:'', h:'' });
						var xul = XULToNode('<vbox><image width="'+opt.w+'" height="'+opt.h+'" src=""/></vbox>');
						var img = xul.firstChild;
						DefineAccess(name, function() undefined, function(val) { img.src='data:'+val });
						box.appendChild(xul);
					}
				}) eval(code);
//				container.style.display = '';
			}
		}

		function init() {
			
			QueryPrivilege();

			var ce = new CodeEditor($('code'));
			var controllerManager = new ControllerManager($('ui'));

			var api = {

				SetUserInterface: function(uiCode) {

					controllerManager.SetUserInterface(uiCode);
				},
				
				ReportError: function(message) {
					
					Trace('ERROR ', message);
				},
			}

			var rmc = new RemoteMessageClient('127.0.0.1', 8007 );
			var rc = new RemoteCall(rmc);
			rc.api = api;
			
			ce.onChange = function(code) {
				
				rc.SetCode(code);
			}
		

//			ctrlMan.SetUserInterface("image('img');slider('var1', {w:50});hr;area('pos');radio('s1', ['xxa','b','c']); spacer; check('chk'); field('foo');hr; label('l', {text:'test'})");
//			ctrlMan.SetUserInterface("image('img');radio('s1', ['xxa','b','c']);field('foo')");
//			ctrlMan.onChange = function() {}
//			ctrlMan.img = 'image/gif;base64,R0lGODdhMAAwAPAAAAAAAP///ywAAAAAMAAwAAAC8IyPqcvt3wCcDkiLc7C0qwyGHhSWpjQu5yqmCYsapyuvUUlvONmOZtfzgFzByTB10QgxOR0TqBQejhRNzOfkVJ+5YiUqrXF5Y5lKh/DeuNcP5yLWGsEbtLiOSpa/TPg7JpJHxyendzWTBfX0cxOnKPjgBzi4diinWGdkF8kjdfnycQZXZeYGejmJlZeGl9i2icVqaNVailT6F5iJ90m6mvuTS4OK05M0vDk0Q4XUtwvKOzrcd3iq9uisF81M1OIcR7lEewwcLp7tuNNkM3uNna3F2JQFo97Vriy/Xl4/f1cf5VWzXyym7PHhhx4dbgYKAAA7';
			
		}
		
	]]></script>

	<hbox flex="1">
		<textbox id="code" multiline="true" wrap="off" flex="1" class="plain" spellcheck="false"/>
		<splitter collapse="before" resizeafter="farthest">
			<grippy/>
		</splitter>
		<vbox id="ui"/>
	</hbox>


</window>
